import{satisfies as W}from"semver";import h from"chalk";import{promisify as Q}from"node:util";import{gzip as z}from"node:zlib";import{z as o}from"zod";import C from"child_process";import{ReadableStream as q,TextEncoderStream as X}from"node:stream/web";function U(n){return typeof n=="string"?n:n instanceof Error?`${n.stack??""}`:JSON.stringify(n,null,"	")}function $(n){console.log(`[codecov] ${n}`)}function B(n){return $(h.green(U(n)))}function _(n){return $(h.red(U(n)))}function P(n){return $(h.cyan(U(n)))}function s(n,{enabled:e=!0}={enabled:!0}){if(e)return $(h.italic.yellow(U(n)))}const D=">=18.18.0";function Z(n){return W(process.version,D)?!1:(_(`Codecov ${n.framework} bundler plugin requires Node.js ${D}. You are using Node.js ${process.version}. Please upgrade your Node.js version.`),!0)}const nn=/\.(?:css|html|json|js|svg|txt|xml|xhtml)$/,A=async({fileName:n,code:e})=>nn.test(n)?(await Q(z)(typeof e=="string"?e:Buffer.from(e))).length:null,M=/[a-f0-9]{8,}/i,en=["[hash]","[contenthash]","[fullhash]","[chunkhash]"],V=n=>n.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d"),y=(n,e)=>{const t=[];for(const u of en){const i=e.indexOf(u);i!==-1&&t.push({hashString:u,hashIndex:i})}let r=n;for(const u of t){const i=e.at(u.hashIndex-1)??"",a=`(?<leadingDelimiter>${V(i)})`;let l=e.at(u.hashIndex+u.hashString.length)??"";l==="["&&(l=".");const d=`(?<endingDelimiter>${V(l)})`,J=`(${a}(?<hash>[0-9a-zA-Z/+=-]+)${d})`,x=new RegExp(J,"i");r=r.replace(x,"$<leadingDelimiter>*$<endingDelimiter>")}return r===n&&M.test(r)?r.replace(M,"*"):r},tn=async({source:n,fileName:e,formatString:t})=>{const r=n instanceof Buffer?n.byteLength:Buffer.from(n).byteLength,u=await A({fileName:e,code:n});return{name:e,size:r,gzipSize:u,normalized:y(e,t)}},rn=/^[\w\d_:/@\.{}\[\]$-]+$/,un=o.object({branch:o.string({invalid_type_error:"`branch` must be a string."}).optional(),build:o.string({invalid_type_error:"`build` must be a string."}).optional(),compareSha:o.string({invalid_type_error:"`compareSha` must be a string."}).optional(),pr:o.string({invalid_type_error:"`pr` must be a string."}).optional(),sha:o.string({invalid_type_error:"`sha` must be a string."}).optional(),slug:o.string({invalid_type_error:"`slug` must be a string."}).optional()}),sn=n=>o.object({apiUrl:o.string({invalid_type_error:"`apiUrl` must be a string."}).url({message:`apiUrl: \`${n?.apiUrl}\` is not a valid URL.`}).default("https://api.codecov.io"),bundleName:o.string({invalid_type_error:"`bundleName` must be a string.",required_error:"`bundleName` is required for uploading bundle analysis information."}).regex(rn,{message:`bundleName: \`${n?.bundleName}\` does not match format: \`/^[wd_:/@.{}[]$-]+$/\`.`}),dryRun:o.boolean({invalid_type_error:"`dryRun` must be a boolean."}).default(!1),retryCount:o.number({invalid_type_error:"`retryCount` must be a number."}).positive({message:"`retryCount` must be a positive number."}).int({message:"`retryCount` must be an integer."}).default(3),enableBundleAnalysis:o.boolean({invalid_type_error:"`enableBundleAnalysis` must be a boolean."}).default(!1),uploadToken:o.string({invalid_type_error:"`uploadToken` must be a string."}).optional(),uploadOverrides:un.optional(),debug:o.boolean({invalid_type_error:"`debug` must be a boolean."}).default(!1)}),an=n=>{const e=sn(n).safeParse(n);if(!e.success){const t=[],r=e.error.issues;for(const u of r)t.push(u.message);return{success:!1,errors:t}}return{options:e.data,success:!0}},on=n=>{let e=!1;for(const t of n.errors)t.includes("bundleName")&&(e=!0),_(t);return{shouldExit:e}};class f extends Error{constructor(e){super(e)}}class cn extends Error{constructor(e){super(e)}}class H extends Error{constructor(e){super(e)}}const ln=104857600,G=3,_n=1e3,En=":::",gn="::::";class w extends Error{constructor(e){super(e)}}const dn=n=>new Promise(e=>setTimeout(e,n)),Y=async({url:n,retryCount:e,requestData:t,name:r})=>{let u=new Response(null,{status:400});for(let i=0;i<e+1;i++)try{if(s(`Attempting to fetch ${r}, attempt: ${i+1}`),await dn(_n*i),u=await fetch(n,t),!u.ok)throw new w("Response not ok");break}catch(a){if(s(`${r} fetch attempt ${i+1} failed`),i+1===e){if(_(`${r} failed after ${i} attempts`),!(a instanceof w))throw a;return u}}return u};class Rn extends Error{constructor(e){super(e)}}const In=n=>{for(const[e,t]of Object.entries(n))e==="slug"&&typeof t=="string"&&(n[e]=bn(t)),(!t||t==="")&&(n[e]=null);return n},bn=n=>{const e=n.lastIndexOf("/")+1,t=n.substring(0,e).trimEnd(),r=n.substring(e,n.length);if(t===""||r==="")throw _("Invalid owner and/or repo"),new Rn("Invalid owner and/or repo");return[t?.split("/").join(En).slice(0,-3),r].join(gn)},fn=o.object({url:o.string()}),mn=async({apiURL:n,uploadToken:e,serviceParams:t,retryCount:r=G})=>{if(!e)throw _("No upload token found"),new cn("No upload token found");const u=`${n}/upload/bundle_analysis/v1`;let i;try{i=await Y({url:u,retryCount:r,name:"`get-pre-signed-url`",requestData:{method:"POST",headers:{"Content-Type":"application/json",Authorization:`token ${e}`},body:JSON.stringify(In(t))}})}catch{throw _("Failed to fetch pre-signed URL"),new f("Failed to fetch pre-signed URL")}if(i.status===429)throw _("Upload limit reached"),new H("Upload limit reached");if(!i.ok)throw _("Failed to get pre-signed URL, bad response"),new f("Failed to get pre-signed URL");let a;try{a=await i.json()}catch{throw _("Failed to parse pre-signed URL body"),new f("Failed to parse pre-signed URL body")}const l=fn.safeParse(a);if(!l.success)throw _("Failed to validate pre-signed URL"),new f("Failed to validate pre-signed URL");return B("Successfully pre-signed URL fetched"),l.data.url};function hn(n){return(n?.CI==="true"||n?.CI==="True")&&(n?.APPVEYOR==="true"||n?.APPVEYOR==="True")}function Un(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.APPVEYOR_JOB_ID??null}function $n(n){const{envs:e}=n;return e?.APPVEYOR_URL&&e?.APPVEYOR_REPO_NAME&&e?.APPVEYOR_BUILD_ID&&e?.APPVEYOR_JOB_ID?`${e?.APPVEYOR_URL}/project/${e?.APPVEYOR_REPO_NAME}/builds/${e?.APPVEYOR_BUILD_ID}/job/${e?.APPVEYOR_JOB_ID}`:null}function vn(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.APPVEYOR_REPO_BRANCH??null}function Cn(n){return n?.APPVEYOR_ACCOUNT_NAME&&n?.APPVEYOR_PROJECT_SLUG&&n?.APPVEYOR_BUILD_VERSION?`${n?.APPVEYOR_ACCOUNT_NAME}/${n?.APPVEYOR_PROJECT_SLUG}/${n?.APPVEYOR_BUILD_VERSION}`:null}function pn(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.APPVEYOR_PULL_REQUEST_NUMBER??null}function Sn(){return"appveyor"}function Nn(){return"Appveyor CI"}function Tn(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.APPVEYOR_PULL_REQUEST_HEAD_COMMIT??r?.APPVEYOR_REPO_COMMIT;return s(`Using commit: ${u??""}`,{enabled:e.debug}),u??null}function Ln(n){const{args:e,envs:t}=n;return e?.slug&&e.slug!==""?e.slug:t?.APPVEYOR_REPO_NAME??null}async function On(n,e){return{branch:vn(n),build:Un(n),buildURL:$n(n),commit:Tn(n,e),job:Cn(n.envs),pr:pn(n),service:Sn(),slug:Ln(n)}}function Bn(){return["APPVEYOR","APPVEYOR_ACCOUNT_NAME","APPVEYOR_BUILD_ID","APPVEYOR_BUILD_VERSION","APPVEYOR_JOB_ID","APPVEYOR_PROJECT_SLUG","APPVEYOR_PULL_REQUEST_HEAD_COMMIT","APPVEYOR_PULL_REQUEST_NUMBER","APPVEYOR_REPO_BRANCH","APPVEYOR_REPO_COMMIT","APPVEYOR_REPO_NAME","APPVEYOR_URL","CI"]}const Pn={__proto__:null,detect:hn,getEnvVarNames:Bn,getServiceName:Nn,getServiceParams:On};function R(n,e=[]){const t=C.spawnSync(n,e,{maxBuffer:ln});if(t.error)throw new Error(`Error running external program: ${t.error}`);return t.stdout.toString().trim()}function F(n){if(typeof n!="string")return"";if(n.match(/^(ssh|https?):/)){const e=(n.split("//")[1]?.replace(".git","")??"")?.split("/")??"";return e.length>2?`${e[1]}/${e[2]}`:""}if(n.match("@"))return n.split(":")[1]?.replace(".git","")??"";throw new Error(`Unable to parse slug URL: ${n}`)}function I(n){let e=null;return n||(n=R("git",["config","--get","remote.origin.url"])||""),n&&(e=F(n)),e==="/"&&(e=null),e}function Dn(n){return!!n?.SYSTEM_TEAMFOUNDATIONSERVERURI}function An(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.BUILD_BUILDNUMBER??null}function Mn(n){const{envs:e}=n;return e?.SYSTEM_TEAMPROJECT&&e?.BUILD_BUILDID?`${e?.SYSTEM_TEAMFOUNDATIONSERVERURI}${e?.SYSTEM_TEAMPROJECT}/_build/results?buildId=${e?.BUILD_BUILDID}`:null}function Vn(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.BUILD_SOURCEBRANCH?t?.BUILD_SOURCEBRANCH.toString().replace("refs/heads/",""):null}function yn(n){return n?.BUILD_BUILDID??null}function j(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.SYSTEM_PULLREQUEST_PULLREQUESTNUMBER??t?.SYSTEM_PULLREQUEST_PULLREQUESTID??null}function Hn(){return"azure_pipelines"}function Gn(){return"Azure Pipelines"}function wn(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t?.sha}`,{enabled:e.debug}),t.sha;let u=r?.BUILD_SOURCEVERSION??null;if(j(n)){const i=/^[a-z0-9]{40} [a-z0-9]{40}$/,a=C.execFileSync("git",["show","--no-patch","--format=%P"]).toString().trimEnd();if(s(`Merge commit message: ${a}`,{enabled:e.debug}),i.exec(a)){const l=a.split(" ");s(`Split merge commit: ${l}`,{enabled:e.debug}),u=l?.[1]??""}}return s(`Using commit: ${u}`,{enabled:e.debug}),u}function Yn(n){const{args:e,envs:t}=n;return e?.slug&&e.slug!==""?e.slug:t?.BUILD_REPOSITORY_NAME??I("")??null}async function Fn(n,e){return{branch:Vn(n),build:An(n),buildURL:Mn(n),commit:wn(n,e),job:yn(n.envs),pr:j(n),service:Hn(),slug:Yn(n)}}function jn(){return["BUILD_BUILDID","BUILD_BUILDNUMBER","BUILD_SOURCEBRANCH","BUILD_SOURCEVERSION","SYSTEM_PULLREQUEST_PULLREQUESTID","SYSTEM_PULLREQUEST_PULLREQUESTNUMBER","SYSTEM_TEAMFOUNDATIONSERVERURI","SYSTEM_TEAMPROJECT"]}const kn={__proto__:null,detect:Dn,getEnvVarNames:jn,getServiceName:Gn,getServiceParams:Fn},Kn=40,Jn=/^[0-9a-f]+$/;function xn(n,e=Kn){return o.string().length(e).refine(t=>Jn.test(t)).safeParse(n).success}function Wn(n){return!!n?.CI&&!!n?.BITBUCKET_BUILD_NUMBER}function Qn(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.BITBUCKET_BUILD_NUMBER??null}function zn(){return null}function qn(n){const{args:e,envs:t}=n;return e?.branch&&e?.branch!==""?e?.branch:t?.BITBUCKET_BRANCH??null}function Xn(n){return n?.BITBUCKET_BUILD_NUMBER??null}function Zn(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.BITBUCKET_PR_ID??null}function ne(){return"bitbucket"}function ee(){return"Bitbucket"}function te(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;let u=r.BITBUCKET_COMMIT??"";return u&&xn(u,12)&&(u=R("git",["rev-parse",u])),s(`Using commit: ${u??""}`,{enabled:e.debug}),u??null}function re(n){const{args:e,envs:t}=n;return e?.slug&&e.slug!==""?e.slug:t?.BITBUCKET_REPO_FULL_NAME??null}async function ue(n,e){return{branch:qn(n),build:Qn(n),buildURL:zn(),commit:te(n,e),job:Xn(n.envs),pr:Zn(n),service:ne(),slug:re(n)}}function se(){return["CI","BITBUCKET_BUILD_NUMBER"]}const ie={__proto__:null,detect:Wn,getEnvVarNames:se,getServiceName:ee,getServiceParams:ue};function ae(n){return!!n?.CI&&!!n?.BITRISE_IO}function oe(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.BITRISE_BUILD_NUMBER??null}function ce(n){const{envs:e}=n;return e?.BITRISE_BUILD_URL??null}function le(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.BITRISE_GIT_BRANCH??null}function _e(){return null}function Ee(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.BITRISE_PULL_REQUEST??null}function ge(){return"bitrise"}function de(){return"Bitrise CI"}function Re(n,e){const{args:t,envs:r}=n;return t?.sha&&t.sha!==""?(s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha):(s(`Using commit: ${r?.GIT_CLONE_COMMIT_HASH??""}`,{enabled:e.debug}),r?.GIT_CLONE_COMMIT_HASH??null)}function Ie(n){const{args:e}=n;return e?.slug&&e.slug!==""?e.slug:I("")??null}async function be(n,e){return{branch:le(n),build:oe(n),buildURL:ce(n),commit:Re(n,e),job:_e(),pr:Ee(n),service:ge(),slug:Ie(n)}}function fe(){return["BITRISE_BUILD_NUMBER","BITRISE_BUILD_URL","BITRISE_GIT_BRANCH","BITRISE_IO","BITRISE_PULL_REQUEST","CI","GIT_CLONE_COMMIT_HASH"]}const me={__proto__:null,detect:ae,getEnvVarNames:fe,getServiceName:de,getServiceParams:be};function he(n){return!!n?.BUILDKITE}function Ue(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.BUILDKITE_BUILD_NUMBER??null}function $e(n){return n.envs?.BUILDKITE_BUILD_URL??null}function ve(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.BUILDKITE_BRANCH??null}function Ce(n){return n?.BUILDKITE_JOB_ID??null}function pe(n){const{args:e}=n;return e?.pr??null}function k(){return"buildkite"}function Se(){return"Buildkite"}function Ne(n,e){const{args:t,envs:r}=n;return t?.sha&&t.sha!==""?(s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha):(s(`Using commit: ${t?.sha??r?.BUILDKITE_COMMIT}`,{enabled:e.debug}),r?.BUILDKITE_COMMIT??null)}function Te(n){const{args:e,envs:t}=n;return v(e?.slug,t?.BUILDKITE_ORGANIZATION_SLUG,t?.BUILDKITE_PIPELINE_SLUG)}async function Le(n,e){return{branch:ve(n),build:Ue(n),buildURL:$e(n),commit:Ne(n,e),job:Ce(n.envs),pr:pe(n),service:k(),slug:Te(n)}}function Oe(){return["BUILDKITE","BUILDKITE_BRANCH","BUILDKITE_BUILD_NUMBER","BUILDKITE_BUILD_URL","BUILDKITE_COMMIT","BUILDKITE_JOB_ID","BUILDKITE_PROJECT_SLUG"]}const Be={__proto__:null,_getService:k,detect:he,getEnvVarNames:Oe,getServiceName:Se,getServiceParams:Le};function Pe(n){return!!n?.CI&&!!n?.CIRCLECI}function De(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.CIRCLE_BUILD_NUM??null}function Ae(n){return n.envs?.CIRCLE_BUILD_URL??null}function Me(){return"circleci"}function Ve(){return"CircleCI"}function ye(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.CIRCLE_BRANCH??null}function He(n,e){const{args:t,envs:r}=n;return t?.sha&&t.sha!==""?(s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha):(s(`Using commit: ${r?.CIRCLE_SHA1}`,{enabled:e.debug}),r?.CIRCLE_SHA1??null)}function Ge(n){const{args:e,envs:t}=n,r=v(e?.slug,t?.CIRCLE_PROJECT_USERNAME,t?.CIRCLE_PROJECT_REPONAME);return t?.CIRCLE_REPOSITORY_URL&&t?.CIRCLE_REPOSITORY_URL!==""?`${t?.CIRCLE_REPOSITORY_URL?.split(":")[1]?.split(".git")[0]}`:r}function we(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.CIRCLE_PR_NUMBER??null}function Ye(n){return n?.CIRCLE_NODE_INDEX??null}async function Fe(n,e){return{branch:ye(n),build:De(n),buildURL:Ae(n),commit:He(n,e),job:Ye(n.envs),pr:we(n),service:Me(),slug:Ge(n)}}function je(){return["CI","CIRCLECI"]}const ke={__proto__:null,detect:Pe,getEnvVarNames:je,getServiceName:Ve,getServiceParams:Fe};function Ke(n){return!!n?.CIRRUS_CI}function Je(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.CIRRUS_BUILD_ID??null}function xe(){return null}function We(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.CIRRUS_BRANCH??null}function Qe(n){return n?.CIRRUS_TASK_ID??null}function ze(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.CIRRUS_PR??null}function qe(){return"cirrus-ci"}function Xe(){return"Cirrus CI"}function Ze(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.CIRRUS_CHANGE_IN_REPO??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function nt(n){const{args:e,envs:t}=n;return v(e?.slug,t?.CIRRUS_REPO_OWNER,t?.CIRRUS_REPO_NAME)}async function et(n,e){return{branch:We(n),build:Je(n),buildURL:xe(),commit:Ze(n,e),job:Qe(n.envs),pr:ze(n),service:qe(),slug:nt(n)}}function tt(){return["CIRRUS_CI"]}const rt={__proto__:null,detect:Ke,getEnvVarNames:tt,getServiceName:Xe,getServiceParams:et};function ut(n){return!!n?.CF_PAGES}function st(n){const{args:e}=n;return e?.build??null}function it(){return null}function at(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.CF_PAGES_BRANCH??null}function ot(){return null}function ct(n){const{args:e}=n;return e?.pr??null}function lt(){return"cloudflare-pages"}function _t(){return"Cloudflare Pages"}function Et(n,e){const{args:t,envs:r}=n;return t?.sha&&t.sha!==""?(s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha):(s(`Using commit: ${r?.CF_PAGES_COMMIT_SHA??""}`,{enabled:e.debug}),r?.CF_PAGES_COMMIT_SHA??null)}function gt(n){const{args:e}=n;return e?.slug??null}async function dt(n,e){return{branch:at(n),build:st(n),buildURL:it(),commit:Et(n,e),job:ot(),pr:ct(n),service:lt(),slug:gt(n)}}function Rt(){return["CF_PAGES","CF_PAGES_COMMIT_SHA","CF_PAGES_BRANCH","CF_PAGES_URL"]}const It={__proto__:null,detect:ut,getEnvVarNames:Rt,getServiceName:_t,getServiceParams:dt};function bt(n){return!!n?.CODEBUILD_CI}function ft(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.CODEBUILD_BUILD_ID??null}function mt(){return null}function ht(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.CODEBUILD_WEBHOOK_HEAD_REF?t?.CODEBUILD_WEBHOOK_HEAD_REF.replace(/^refs\/heads\//,""):null}function Ut(n){return n?.CODEBUILD_BUILD_ID??null}function $t(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.CODEBUILD_SOURCE_VERSION&&t?.CODEBUILD_SOURCE_VERSION.startsWith("pr/")?t?.CODEBUILD_SOURCE_VERSION.replace(/^pr\//,""):null}function vt(){return"codebuild"}function Ct(){return"AWS CodeBuild"}function pt(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.CODEBUILD_RESOLVED_SOURCE_VERSION??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function St(n){const{args:e,envs:t}=n;return e?.slug&&e?.slug!==""?e?.slug:t?.CODEBUILD_SOURCE_REPO_URL?t?.CODEBUILD_SOURCE_REPO_URL.toString().replace(/^.*github.com\//,"").replace(/\.git$/,""):null}async function Nt(n,e){return{branch:ht(n),build:ft(n),buildURL:mt(),commit:pt(n,e),job:Ut(n.envs),pr:$t(n),service:vt(),slug:St(n)}}function Tt(){return["CODEBUILD_BUILD_ID","CODEBUILD_CI","CODEBUILD_RESOLVED_SOURCE_VERSION","CODEBUILD_SOURCE_REPO_URL","CODEBUILD_SOURCE_VERSION","CODEBUILD_WEBHOOK_HEAD_REF"]}const Lt={__proto__:null,detect:bt,getEnvVarNames:Tt,getServiceName:Ct,getServiceParams:Nt};function Ot(n){return!!n?.DRONE}function Bt(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.DRONE_BUILD_NUMBER??null}function Pt(n){const{envs:e}=n;return e?.DRONE_BUILD_LINK??e?.DRONE_BUILD_URL??e?.CI_BUILD_URL??null}function Dt(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e?.branch:t?.DRONE_BRANCH??null}function At(){return null}function Mt(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e?.pr:t?.DRONE_PULL_REQUEST??null}function Vt(){return"drone.io"}function yt(){return"Drone"}function Ht(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.DRONE_COMMIT_SHA??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function Gt(n){const{args:e,envs:t}=n;return e?.slug&&e?.slug!==""?e?.slug:t?.DRONE_REPO??null}async function wt(n,e){return{branch:Dt(n),build:Bt(n),buildURL:Pt(n),commit:Ht(n,e),job:At(),pr:Mt(n),service:Vt(),slug:Gt(n)}}function Yt(){return["DRONE","DRONE_BRANCH","DRONE_BUILD_NUMBER","DRONE_BUILD_URL","DRONE_COMMIT_SHA","DRONE_PULL_REQUEST","DRONE_REPO"]}const Ft={__proto__:null,detect:Ot,getEnvVarNames:Yt,getServiceName:yt,getServiceParams:wt},jt=o.union([o.string(),o.number(),o.boolean(),o.null()]),p=o.lazy(()=>o.union([jt,o.array(p),o.record(p)]));function kt(n){return!!n?.GITHUB_ACTIONS}function S(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.GITHUB_RUN_ID??null}async function Kt(n){const e=`https://api.github.com/repos/${T(n)}/actions/runs/${S(n)}/jobs`,t=await fetch(e,{headers:{"User-Agent":"Awesome-Octocat-App"}});if(t.status!==200)return null;const r=await t.json(),u=p.parse(r),{envs:i}=n;if(u&&typeof u=="object"&&"jobs"in u&&Array.isArray(u?.jobs)){for(const a of u?.jobs)if(a&&typeof a=="object"&&"name"in a&&a?.name==i?.GITHUB_JOB&&"html_url"in a&&typeof a?.html_url=="string")return a?.html_url}return null}async function Jt(n){const{envs:e}=n,t=await Kt(n);return t!==null?t:`${e?.GITHUB_SERVER_URL}/${T(n)}/actions/runs/${S(n)}`}function xt(n){const{args:e,envs:t}=n;if(e?.branch&&e.branch!=="")return e.branch;const r=/refs\/heads\/(.*)/.exec(t?.GITHUB_REF??"");let u;return r&&(u=r[1]),t?.GITHUB_HEAD_REF&&t?.GITHUB_HEAD_REF!==""&&(u=t?.GITHUB_HEAD_REF),u??null}function Wt(n){return n?.GITHUB_WORKFLOW??null}function N(n){const{args:e,envs:t}=n;if(e?.pr&&e.pr!=="")return e.pr;let r;if(t?.GITHUB_HEAD_REF&&t?.GITHUB_HEAD_REF!==""){const u=/refs\/pull\/([0-9]+)\/merge/.exec(t?.GITHUB_REF??"");u&&(r=u[1])}return r??null}function Qt(){return"github-actions"}function zt(){return"GitHub Actions"}function qt(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=N(n);let i=r?.GITHUB_SHA;if(u){const a=/^[a-z0-9]{40} [a-z0-9]{40}$/,l=R("git",["show","--no-patch","--format=%P"]);if(s(`Merge commit message: ${l}`,{enabled:e.debug}),a.exec(l)){const d=l.split(" ");s(`Split commit message: ${d}`,{enabled:e.debug}),i=d[1]}}return s(`Using commit: ${i??null}`,{enabled:e.debug}),i??null}function Xt(n,e){const{args:t}=n;if(t?.compareSha&&t.compareSha!=="")return s(`Using commit: ${t.compareSha}`,{enabled:e.debug}),t.compareSha;let r=null;if(N(n)){const u=/^[a-z0-9]{40} [a-z0-9]{40}$/,i=R("git",["show","--no-patch","--format=%P"]);if(s(`Merge commit message: ${i}`,{enabled:e.debug}),u.exec(i)){const a=i.split(" ");s(`Split commit message: ${a}`,{enabled:e.debug}),r=a?.[0]?a[0]:null}}return s(`Using compareSha: ${r??null}`,{enabled:e.debug}),r??null}function T(n){const{args:e,envs:t}=n;return e?.slug&&e.slug!==""?e.slug:t?.GITHUB_REPOSITORY??null}async function Zt(n,e){return{branch:xt(n),build:S(n),buildURL:await Jt(n),commit:qt(n,e),compareSha:Xt(n,e),job:Wt(n.envs),pr:N(n),service:Qt(),slug:T(n)}}function nr(){return["GITHUB_ACTION","GITHUB_HEAD_REF","GITHUB_REF","GITHUB_REPOSITORY","GITHUB_RUN_ID","GITHUB_SERVER_URL","GITHUB_SHA","GITHUB_WORKFLOW"]}const er={__proto__:null,detect:kt,getEnvVarNames:nr,getServiceName:zt,getServiceParams:Zt};function tr(n){return!!n?.GITLAB_CI}function rr(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.CI_BUILD_ID??t?.CI_JOB_ID??null}function ur(){return null}function sr(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.CI_BUILD_REF_NAME??t?.CI_COMMIT_REF_NAME??null}function ir(){return null}function ar(n){const{args:e}=n;return e?.pr??null}function or(){return"gitlab"}function cr(){return"GitLab CI"}function lr(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.CI_MERGE_REQUEST_SOURCE_BRANCH_SHA??r?.CI_BUILD_REF??r?.CI_COMMIT_SHA??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function _r(n){const{args:e,envs:t}=n;if(e?.slug&&e?.slug!=="")return e?.slug;const r=t?.CI_BUILD_REPO??t?.CI_REPOSITORY_URL??"";return t?.CI_PROJECT_PATH??I(r)??null}async function Er(n,e){return{branch:sr(n),build:rr(n),buildURL:ur(),commit:lr(n,e),job:ir(),pr:ar(n),service:or(),slug:_r(n)}}function gr(){return["CI_BUILD_ID","CI_BUILD_REF","CI_BUILD_REF_NAME","CI_BUILD_REPO","CI_COMMIT_REF_NAME","CI_COMMIT_SHA","CI_JOB_ID","CI_MERGE_REQUEST_SOURCE_BRANCH_SHA","CI_PROJECT_PATH","CI_REPOSITORY_URL","GITLAB_CI"]}const dr={__proto__:null,detect:tr,getEnvVarNames:gr,getServiceName:cr,getServiceParams:Er};function Rr(n){return!!n?.CI&&!!n?.HEROKU_TEST_RUN_BRANCH}function Ir(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.HEROKU_TEST_RUN_ID??null}function br(){return null}function fr(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.HEROKU_TEST_RUN_BRANCH??null}function mr(){return null}function hr(n){const{args:e}=n;return e?.pr??null}function Ur(){return"heroku"}function $r(){return"Heroku CI"}function vr(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t?.sha;const u=r?.HEROKU_TEST_RUN_COMMIT_VERSION??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function Cr(n){const{args:e}=n;return e?.slug&&e.slug!==""?e?.slug:I("")}async function pr(n,e){return{branch:fr(n),build:Ir(n),buildURL:br(),commit:vr(n,e),job:mr(),pr:hr(n),service:Ur(),slug:Cr(n)}}function Sr(){return["CI","HEROKU_TEST_RUN_BRANCH","HEROKU_TEST_RUN_COMMIT_VERSION","HEROKU_TEST_RUN_ID"]}const Nr={__proto__:null,detect:Rr,getEnvVarNames:Sr,getServiceName:$r,getServiceParams:pr};function Tr(n){return!!n?.JENKINS_URL}function Lr(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.BUILD_NUMBER??null}function Or(n){const{envs:e}=n;return e?.BUILD_URL?e?.BUILD_URL:null}function Br(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.ghprbSourceBranch??t?.CHANGE_BRANCH??t?.GIT_BRANCH??t?.BRANCH_NAME??null}function Pr(){return null}function Dr(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.ghprbPullId??t?.CHANGE_ID??null}function Ar(){return"jenkins"}function Mr(){return"Jenkins CI"}function Vr(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.ghprbActualCommit??r?.GIT_COMMIT??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function yr(n){const{args:e}=n;return e?.slug&&e?.slug!==""?e?.slug:I("")}async function Hr(n,e){return{branch:Br(n),build:Lr(n),buildURL:Or(n),commit:Vr(n,e),job:Pr(),pr:Dr(n),service:Ar(),slug:yr(n)}}function Gr(){return["BRANCH_NAME","BUILD_NUMBER","BUILD_URL","CHANGE_ID","GIT_BRANCH","GIT_COMMIT","JENKINS_URL","ghprbActualCommit","ghprbPullId","ghprbSourceBranch"]}const wr={__proto__:null,detect:Tr,getEnvVarNames:Gr,getServiceName:Mr,getServiceParams:Hr};function Yr(n){return!C?.spawnSync(n)?.error}function Fr(){return Yr("git")}function jr(n){const{args:e}=n;return e?.build??null}function kr(){return null}function Kr(n){const{args:e,envs:t}=n,r=e?.branch??t?.GIT_BRANCH??t?.BRANCH_NAME??null;if(r!=="")return r;try{return R("git",["rev-parse","--abbrev-ref","HEAD"])}catch(u){throw new Error(`There was an error getting the branch name from git: ${u}`)}}function Jr(){return null}function xr(n){const{args:e}=n;return e?.pr??null}function Wr(){return""}function Qr(){return"Local"}function zr(n,e){const{args:t,envs:r}=n,u=t?.sha??r?.GIT_COMMIT??null;if(u!=="")return s(`Using commit: ${u}`,{enabled:e.debug}),u;try{const i=R("git",["rev-parse","HEAD"]);return s(`Using commit: ${i}`,{enabled:e.debug}),i}catch(i){throw new Error(`There was an error getting the commit SHA from git: ${i}`)}}function qr(n){const{args:e}=n;if(e?.slug&&e?.slug!=="")return e.slug;try{const t=R("git",["config","--get","remote.origin.url"]);return F(t)}catch(t){throw new Error(`There was an error getting the slug from git: ${t}`)}}async function Xr(n,e){return{branch:Kr(n),build:jr(n),buildURL:kr(),commit:zr(n,e),job:Jr(),pr:xr(n),service:Wr(),slug:qr(n)}}function Zr(){return["BRANCH_NAME","CI","GIT_BRANCH","GIT_COMMIT"]}const nu={__proto__:null,detect:Fr,getEnvVarNames:Zr,getServiceName:Qr,getServiceParams:Xr};function eu(n){return!!n?.NETLIFY}function tu(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.BUILD_ID??null}function ru(){return null}function uu(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e?.branch:t?.BRANCH??null}function su(){return null}function iu(n){const{args:e}=n;return e?.pr??null}function au(){return"netlify"}function ou(){return"Netlify"}function cu(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.COMMIT_REF??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function lu(n){const{args:e}=n;return e?.slug??null}async function _u(n,e){return{branch:uu(n),build:tu(n),buildURL:ru(),commit:cu(n,e),job:su(),pr:iu(n),service:au(),slug:lu(n)}}function Eu(){return["NETLIFY","BUILD_ID","REPOSITORY_URL","BRANCH","HEAD","COMMIT_REF","CACHED_COMMIT_REF","PULL_REQUEST","REVIEW_ID"]}const gu={__proto__:null,detect:eu,getEnvVarNames:Eu,getServiceName:ou,getServiceParams:_u};function du(n){return!!n?.RENDER}function Ru(n){const{args:e}=n;return e?.build??null}function Iu(){return null}function bu(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.RENDER_GIT_BRANCH??null}function fu(){return null}function mu(n){const{args:e}=n;return e?.pr??null}function hu(){return"render"}function Uu(){return"Render"}function $u(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.RENDER_GIT_COMMIT??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function vu(n){const{args:e,envs:t}=n;return e?.slug&&e?.slug!==""?e?.slug:t?.RENDER_GIT_REPO_SLUG??null}async function Cu(n,e){return{branch:bu(n),build:Ru(n),buildURL:Iu(),commit:$u(n,e),job:fu(),pr:mu(n),service:hu(),slug:vu(n)}}function pu(){return["RENDER","IS_PULL_REQUEST","RENDER_DISCOVERY_SERVICE","RENDER_EXTERNAL_HOSTNAME","RENDER_EXTERNAL_URL","RENDER_GIT_BRANCH","RENDER_GIT_COMMIT","RENDER_GIT_REPO_SLUG","RENDER_INSTANCE_ID","RENDER_SERVICE_ID","RENDER_SERVICE_NAME","RENDER_SERVICE_TYPE"]}const Su={__proto__:null,detect:du,getEnvVarNames:pu,getServiceName:Uu,getServiceParams:Cu};function Nu(n){return!!n?.TEAMCITY_VERSION}function Tu(){return null}function Lu(){return"teamcity"}function Ou(){return"TeamCity"}function Bu(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.BRANCH_NAME??null}function Pu(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.BUILD_VCS_NUMBER??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function Du(n){const{args:e}=n;return e?.slug&&e.slug!==""?e.slug:I("")??null}function Au(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.BUILD_NUMBER??null}function Mu(n){const{args:e}=n;return e?.pr??null}function Vu(){return null}async function yu(n,e){return{branch:Bu(n),build:Au(n),buildURL:Tu(),commit:Pu(n,e),job:Vu(),pr:Mu(n),service:Lu(),slug:Du(n)}}function Hu(){return["TEAMCITY_VERSION"]}const Gu={__proto__:null,detect:Nu,getEnvVarNames:Hu,getServiceName:Ou,getServiceParams:yu};function wu(n){return!!n?.CI&&!!n?.TRAVIS&&!n?.SHIPPABLE}function Yu(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.TRAVIS_JOB_NUMBER??null}function Fu(){return null}function ju(n){const{args:e,envs:t}=n;if(e?.branch&&e.branch!=="")return e.branch;let r=null;return t?.TRAVIS_BRANCH!==t?.TRAVIS_TAG&&(r=t?.TRAVIS_PULL_REQUEST_BRANCH??t?.TRAVIS_BRANCH??null),r}function ku(n){return n?.TRAVIS_JOB_ID??null}function Ku(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.TRAVIS_PULL_REQUEST??null}function Ju(){return"travis"}function xu(){return"Travis CI"}function Wu(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.TRAVIS_PULL_REQUEST_SHA??r?.TRAVIS_COMMIT??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function Qu(n){const{args:e,envs:t}=n;return e?.slug&&e.slug!==""?e.slug:t?.TRAVIS_REPO_SLUG??null}async function zu(n,e){return{branch:ju(n),build:Yu(n),buildURL:Fu(),commit:Wu(n,e),job:ku(n.envs),pr:Ku(n),service:Ju(),slug:Qu(n)}}function qu(){return["TRAVIS"]}const Xu={__proto__:null,detect:wu,getEnvVarNames:qu,getServiceName:xu,getServiceParams:zu};function Zu(n){return!!n?.VERCEL}function ns(n){const{args:e}=n;return e?.build??null}function es(){return null}function ts(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.VERCEL_GIT_COMMIT_REF??null}function rs(){return null}function us(n){const{args:e}=n;return e?.pr??null}function ss(){return"vercel"}function is(){return"Vercel"}function as(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.VERCEL_GIT_COMMIT_SHA??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function os(n){const{args:e,envs:t}=n;if(e?.slug&&e.slug!=="")return e.slug;let r=null;const u=t?.VERCEL_GIT_REPO_OWNER??"",i=t?.VERCEL_GIT_REPO_SLUG??"";return u&&i&&(r=`${u}/${i}`),r}async function cs(n,e){return{branch:ts(n),build:ns(n),buildURL:es(),commit:as(n,e),job:rs(),pr:us(n),service:ss(),slug:os(n)}}function ls(){return["VERCEL","CI","VERCEL_ENV","VERCEL_URL","VERCEL_BRANCH_URL","VERCEL_REGION","VERCEL_AUTOMATION_BYPASS_SECRET","VERCEL_GIT_PROVIDER","VERCEL_GIT_REPO_SLUG","VERCEL_GIT_REPO_OWNER","VERCEL_GIT_REPO_ID","VERCEL_GIT_COMMIT_REF","VERCEL_GIT_COMMIT_SHA","VERCEL_GIT_COMMIT_MESSAGE","VERCEL_GIT_COMMIT_AUTHOR_NAME","VERCEL_GIT_PREVIOUS_SHA","VERCEL_GIT_PULL_REQUEST_ID"]}const _s={__proto__:null,detect:Zu,getEnvVarNames:ls,getServiceName:is,getServiceParams:cs};function Es(n){return!!n?.WERCKER_MAIN_PIPELINE_STARTED}function gs(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.WERCKER_MAIN_PIPELINE_STARTED??null}function ds(n){const{envs:e}=n;return e?.WERCKER_BUILD_URL??null}function Rs(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.WERCKER_GIT_BRANCH??null}function Is(){return null}function bs(n){const{args:e}=n;return e?.pr??null}function fs(){return"wercker"}function ms(){return"Wercker CI"}function hs(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.WERCKER_GIT_COMMIT??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function Us(n){const{args:e,envs:t}=n;return v(e?.slug,t?.WERCKER_GIT_OWNER,t?.WERCKER_GIT_REPOSITORY)}async function $s(n,e){return{branch:Rs(n),build:gs(n),buildURL:ds(n),commit:hs(n,e),job:Is(),pr:bs(n),service:fs(),slug:Us(n)}}function vs(){return["WERCKER_MAIN_PIPELINE_STARTED"]}const Cs={__proto__:null,detect:Es,getEnvVarNames:vs,getServiceName:ms,getServiceParams:$s};function ps(n){return n?.CI==="woodpecker"}function Ss(n){const{args:e,envs:t}=n;return e?.build&&e.build!==""?e.build:t?.CI_BUILD_NUMBER??null}function Ns(n){const{envs:e}=n;return e?.CI_BUILD_LINK??null}function Ts(n){const{args:e,envs:t}=n;return e?.branch&&e.branch!==""?e.branch:t?.CI_COMMIT_SOURCE_BRANCH??t?.CI_COMMIT_BRANCH??null}function Ls(n){const{envs:e}=n;return e?.CI_JOB_NUMBER??null}function Os(n){const{args:e,envs:t}=n;return e?.pr&&e.pr!==""?e.pr:t?.CI_COMMIT_PULL_REQUEST??null}function Bs(){return"woodpecker"}function Ps(){return"Woodpecker CI"}function Ds(n,e){const{args:t,envs:r}=n;if(t?.sha&&t.sha!=="")return s(`Using commit: ${t.sha}`,{enabled:e.debug}),t.sha;const u=r?.CI_COMMIT_SHA??null;return s(`Using commit: ${u}`,{enabled:e.debug}),u}function As(n){const{args:e,envs:t}=n;return e?.slug&&e.slug!==""?e.slug:t?.CI_REPO??null}async function Ms(n,e){return{branch:Ts(n),build:Ss(n),buildURL:Ns(n),commit:Ds(n,e),pr:Os(n),job:Ls(n),service:Bs(),slug:As(n)}}function Vs(){return["CI","CI_BUILD_NUMBER","CI_BUILD_LINK","CI_COMMIT_SOURCE_BRANCH","CI_COMMIT_BRANCH","CI_JOB_NUMBER","CI_COMMIT_PULL_REQUEST","CI_COMMIT_SHA","CI_COMMIT_TAG","CI_REPO"]}const ys={__proto__:null,detect:ps,getEnvVarNames:Vs,getServiceName:Ps,getServiceParams:Ms},Hs=[Pn,kn,ie,me,Be,ke,rt,It,Lt,Ft,er,dr,Nr,wr,gu,Su,Gu,Xu,_s,Cs,ys,nu];async function Gs(n,e){P("Detecting CI provider");for(const t of Hs)if(t.detect(n.envs))return P(`Detected CI provider: ${t.getServiceName()}`),await t.getServiceParams(n,e);throw _("Could not detect CI provider"),new Error("Could not detect provider")}function v(n,e,t){return typeof n<"u"&&n!==""?n:typeof e<"u"&&typeof t<"u"&&e!==""&&t!==""?`${e}/${t}`:null}class ws extends Error{constructor(e){super(e)}}async function Ys({message:n,bundleName:e,preSignedUrl:t,retryCount:r=G}){const u=n[Symbol.iterator](),i=new q({pull(l){const d=u.next();d.done?l.close():l.enqueue(d.value)}}).pipeThrough(new X);let a;try{a=await Y({url:t,retryCount:r,name:"`upload-stats`",requestData:{method:"PUT",headers:{"Content-Type":"application/json"},duplex:"half",body:i}})}catch{throw _("Failed to upload stats, fetch failed"),new f("Failed to upload stats")}if(a.status===429)throw _("Upload limit reached"),new H("Upload limit reached");if(!a.ok)throw _(`Failed to upload stats, bad response. Response ${a.status} - ${a.statusText}`),new ws("Failed to upload stats");return B(`Successfully uploaded stats for bundle: ${e}`),!0}var Fs=Object.defineProperty,js=(n,e,t)=>e in n?Fs(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,c=(n,e,t)=>(js(n,typeof e!="symbol"?e+"":e,t),t),K=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},E=(n,e,t)=>(K(n,e,"read from private field"),t?t.call(n):e.get(n)),L=(n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},O=(n,e,t,r)=>(K(n,e,"write to private field"),r?r.call(n,t):e.set(n,t),t),b,m,g;class ks{constructor(e){c(this,"apiUrl"),c(this,"dryRun"),c(this,"retryCount"),c(this,"enableBundleAnalysis"),c(this,"uploadToken"),c(this,"debug"),c(this,"originalBundleName"),c(this,"branch"),c(this,"build"),c(this,"pr"),c(this,"sha"),c(this,"slug"),c(this,"version"),c(this,"bundler"),c(this,"outputPath"),c(this,"builtAt"),c(this,"duration"),c(this,"assets"),c(this,"chunks"),c(this,"modules"),L(this,b,void 0),L(this,m,void 0),L(this,g,{bundleName:!1,pluginDetails:!1}),this.version="2",this.apiUrl=e.apiUrl,this.dryRun=e.dryRun,this.retryCount=e.retryCount,this.enableBundleAnalysis=e.enableBundleAnalysis,this.uploadToken=e.uploadToken,this.debug=e.debug,this.originalBundleName=e.bundleName,e.uploadOverrides&&(this.branch=e.uploadOverrides.branch,this.build=e.uploadOverrides.build,this.pr=e.uploadOverrides.pr,this.sha=e.uploadOverrides.sha,this.slug=e.uploadOverrides.slug),O(this,b,e.bundleName)}start(){this.builtAt=Date.now()}end(){this.duration=Date.now()-(this.builtAt??0)}lockBundleName(){E(this,g).bundleName=!0}unlockBundleName(){E(this,g).bundleName=!1}setBundleName(e){return E(this,g).bundleName||O(this,b,e),E(this,b)}get bundleName(){return E(this,b)}setPlugin(e,t){return E(this,g).pluginDetails||O(this,m,{name:e,version:t}),E(this,m)}get plugin(){return E(this,m)}lockPluginDetails(){E(this,g).pluginDetails=!0}unlockPluginDetails(){E(this,g).pluginDetails=!1}async write(){if(this.dryRun||!this.bundleName||this.bundleName==="")return;const e={branch:this.branch,build:this.build,pr:this.pr,sha:this.sha,slug:this.slug},t={envs:process.env,args:e},r=await Gs(t,this);let u="";try{u=await mn({apiURL:this?.apiUrl??"https://api.codecov.io",uploadToken:this?.uploadToken,serviceParams:r,retryCount:this?.retryCount})}catch{return}try{await Ys({preSignedUrl:u,bundleName:this.bundleName,message:this.bundleStatsToJson(),retryCount:this?.retryCount})}catch{return}}bundleStatsToJson(){const e={version:this.version,builtAt:this.builtAt,duration:this.duration,bundleName:this.bundleName??"",outputPath:this.outputPath,bundler:this.bundler,plugin:this.plugin,assets:this.assets,chunks:this.chunks,modules:this.modules};return JSON.stringify(e)}}b=new WeakMap,m=new WeakMap,g=new WeakMap;export{ks as Output,Z as checkNodeVersion,tn as createRollupAsset,A as getCompressedSize,on as handleErrors,an as normalizeOptions,y as normalizePath,_ as red};
//# sourceMappingURL=index.mjs.map
