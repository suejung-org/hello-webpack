{"version":3,"file":"index.cjs","sources":["../src/utils/logging.ts","../src/utils/checkNodeVersion.ts","../src/utils/getCompressedSize.ts","../src/utils/normalizePath.ts","../src/utils/createRollupAsset.ts","../src/utils/normalizeOptions.ts","../src/errors/FailedFetchError.ts","../src/errors/NoUploadTokenError.ts","../src/errors/UploadLimitReachedError.ts","../src/utils/constants.ts","../src/errors/BadResponseError.ts","../src/utils/delay.ts","../src/utils/fetchWithRetry.ts","../src/errors/InvalidSlugError.ts","../src/utils/preProcessBody.ts","../src/utils/getPreSignedURL.ts","../src/utils/providers/AppVeyorCI.ts","../src/utils/runExternalProgram.ts","../src/utils/git.ts","../src/utils/providers/AzurePipelines.ts","../src/utils/validate.ts","../src/utils/providers/Bitbucket.ts","../src/utils/providers/Bitrise.ts","../src/utils/providers/Buildkite.ts","../src/utils/providers/CircleCI.ts","../src/utils/providers/Cirrus.ts","../src/utils/providers/CloudflarePages.ts","../src/utils/providers/CodeBuild.ts","../src/utils/providers/Drone.ts","../src/schemas.ts","../src/utils/providers/GitHubActions.ts","../src/utils/providers/GitLabCI.ts","../src/utils/providers/HerokuCI.ts","../src/utils/providers/JenkinsCI.ts","../src/utils/isProgramInstalled.ts","../src/utils/providers/Local.ts","../src/utils/providers/Netlify.ts","../src/utils/providers/Render.ts","../src/utils/providers/TeamCity.ts","../src/utils/providers/TravisCI.ts","../src/utils/providers/Vercel.ts","../src/utils/providers/Wercker.ts","../src/utils/providers/Woodpecker.ts","../src/utils/providers/index.ts","../src/utils/provider.ts","../src/errors/FailedUploadError.ts","../src/utils/uploadStats.ts","../src/utils/Output.ts"],"sourcesContent":["import Chalk from \"chalk\";\n\nexport function prepareMessage(msg: unknown): string {\n  if (typeof msg === \"string\") {\n    return msg;\n  }\n  if (msg instanceof Error) {\n    return `${msg.stack ?? \"\"}`;\n  }\n  return JSON.stringify(msg, null, \"\\t\");\n}\n\nexport function l(msg: string): void {\n  // Required to properly log to the console\n  // eslint-disable-next-line no-console\n  console.log(`[codecov] ${msg}`);\n}\n\nexport function nl(): void {\n  return l(\"\");\n}\n\nexport function green(msg: string): void {\n  return l(Chalk.green(prepareMessage(msg)));\n}\n\nexport function red(msg: string): void {\n  return l(Chalk.red(prepareMessage(msg)));\n}\n\nexport function dim(msg: string): void {\n  return l(Chalk.dim(prepareMessage(msg)));\n}\n\nexport function yellow(msg: string): void {\n  return l(Chalk.yellow(prepareMessage(msg)));\n}\n\nexport function cyan(msg: string): void {\n  return l(Chalk.cyan(prepareMessage(msg)));\n}\n\ninterface DebugOptions {\n  enabled?: boolean;\n}\n\nexport function debug(\n  // Disable eslint because we want to allow any type of message when debugging\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  msg: any,\n  { enabled = true }: DebugOptions = { enabled: true },\n): void {\n  if (enabled) {\n    return l(Chalk.italic.yellow(prepareMessage(msg)));\n  }\n}\n","import { satisfies } from \"semver\";\nimport { type UnpluginContextMeta } from \"unplugin\";\nimport { red } from \"./logging\";\n\nconst NODE_VERSION_RANGE = \">=18.18.0\";\n\nexport function checkNodeVersion(unpluginMetaContext: UnpluginContextMeta) {\n  if (!satisfies(process.version, NODE_VERSION_RANGE)) {\n    red(\n      `Codecov ${unpluginMetaContext.framework} bundler plugin requires Node.js ${NODE_VERSION_RANGE}. You are using Node.js ${process.version}. Please upgrade your Node.js version.`,\n    );\n\n    return true;\n  }\n\n  return false;\n}\n","import { promisify } from \"node:util\";\nimport { gzip } from \"node:zlib\";\n\nconst COMPRESSIBLE_ASSETS_RE = /\\.(?:css|html|json|js|svg|txt|xml|xhtml)$/;\n\ninterface GetCompressedSizeOptions {\n  fileName: string;\n  code: string | Uint8Array;\n}\n\nexport const getCompressedSize = async ({\n  fileName,\n  code,\n}: GetCompressedSizeOptions) => {\n  const isCompressible = COMPRESSIBLE_ASSETS_RE.test(fileName);\n\n  if (!isCompressible) {\n    return null;\n  }\n\n  const compress = promisify(gzip);\n\n  const compressed = await compress(\n    typeof code === \"string\" ? code : Buffer.from(code),\n  );\n\n  return compressed.length;\n};\n","const HASH_REGEX = /[a-f0-9]{8,}/i;\nconst POTENTIAL_HASHES = [\n  \"[hash]\",\n  \"[contenthash]\",\n  \"[fullhash]\",\n  \"[chunkhash]\",\n];\n\nconst escapeRegex = (string: string): string =>\n  string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n\ninterface HashMatch {\n  hashString: string;\n  hashIndex: number;\n}\n\nexport const normalizePath = (path: string, format: string): string => {\n  // grab all potential hashes in the format string\n  const matches: HashMatch[] = [];\n  for (const hash of POTENTIAL_HASHES) {\n    const index = format.indexOf(hash);\n    if (index !== -1) {\n      matches.push({ hashString: hash, hashIndex: index });\n    }\n  }\n\n  let normalizedPath = path;\n  // loop through all the matches and replace the hash with a wildcard\n  for (const match of matches) {\n    // grab the leading delimiter and create a regex group for it\n    const leadingDelimiter = format.at(match.hashIndex - 1) ?? \"\";\n    const leadingRegex = `(?<leadingDelimiter>${escapeRegex(\n      leadingDelimiter,\n    )})`;\n\n    // grab the ending delimiter and create a regex group for it\n    let endingDelimiter =\n      format.at(match.hashIndex + match.hashString.length) ?? \"\";\n\n    // If the ending delimiter is `[extname]` there won't be a\n    // `.<file-extension>` so we need to replace it with a `.` for the\n    // handling the actual filename, which will have the `.` in the * string.\n\n    if (endingDelimiter === \"[\") {\n      endingDelimiter = \".\";\n    }\n    const endingRegex = `(?<endingDelimiter>${escapeRegex(endingDelimiter)})`;\n\n    // create a regex that will match the hash\n    // potential values gathered from: https://en.wikipedia.org/wiki/Base64\n    // added in `\\-` to account for the `-` character which seems to be used by Rollup through testing\n    const regexString = `(${leadingRegex}(?<hash>[0-9a-zA-Z\\/+=-]+)${endingRegex})`;\n    const HASH_REPLACE_REGEX = new RegExp(regexString, \"i\");\n\n    // replace the hash with a wildcard and the delimiters\n    normalizedPath = normalizedPath.replace(\n      HASH_REPLACE_REGEX,\n      \"$<leadingDelimiter>*$<endingDelimiter>\",\n    );\n  }\n\n  // if the path is the same as the normalized path, and the path contains a\n  // hash, then we can assume that something went wrong and we should just\n  // replace/brute force the hash with a wildcard\n  if (normalizedPath === path && HASH_REGEX.test(normalizedPath)) {\n    return normalizedPath.replace(HASH_REGEX, \"*\");\n  }\n\n  return normalizedPath;\n};\n","import { getCompressedSize } from \"./getCompressedSize.ts\";\nimport { normalizePath } from \"./normalizePath.ts\";\n\ninterface CreateAssetOptions {\n  fileName: string;\n  source: Uint8Array | string;\n  formatString: string;\n}\n\nexport const createRollupAsset = async ({\n  source,\n  fileName,\n  formatString,\n}: CreateAssetOptions) => {\n  const size =\n    source instanceof Buffer\n      ? source.byteLength\n      : Buffer.from(source).byteLength;\n\n  const gzipSize = await getCompressedSize({\n    fileName,\n    code: source,\n  });\n\n  return {\n    name: fileName,\n    size: size,\n    gzipSize: gzipSize,\n    normalized: normalizePath(fileName, formatString),\n  };\n};\n","import { z } from \"zod\";\nimport { type Options } from \"../types.ts\";\nimport { red } from \"./logging.ts\";\n\nexport type NormalizedOptions = z.infer<\n  ReturnType<typeof optionsSchemaFactory>\n> &\n  Options;\n\nconst validBundleName = /^[\\w\\d_:/@\\.{}\\[\\]$-]+$/;\n\nconst UploadOverridesSchema = z.object({\n  branch: z\n    .string({\n      invalid_type_error: \"`branch` must be a string.\",\n    })\n    .optional(),\n  build: z\n    .string({\n      invalid_type_error: \"`build` must be a string.\",\n    })\n    .optional(),\n  compareSha: z\n    .string({\n      invalid_type_error: \"`compareSha` must be a string.\",\n    })\n    .optional(),\n  pr: z\n    .string({\n      invalid_type_error: \"`pr` must be a string.\",\n    })\n    .optional(),\n  sha: z\n    .string({\n      invalid_type_error: \"`sha` must be a string.\",\n    })\n    .optional(),\n  slug: z\n    .string({\n      invalid_type_error: \"`slug` must be a string.\",\n    })\n    .optional(),\n});\n\nconst optionsSchemaFactory = (options: Options) =>\n  z.object({\n    apiUrl: z\n      .string({\n        invalid_type_error: \"`apiUrl` must be a string.\",\n      })\n      .url({\n        message: `apiUrl: \\`${options?.apiUrl}\\` is not a valid URL.`,\n      })\n      .default(\"https://api.codecov.io\"),\n    bundleName: z\n      .string({\n        invalid_type_error: \"`bundleName` must be a string.\",\n        required_error:\n          \"`bundleName` is required for uploading bundle analysis information.\",\n      })\n      .regex(validBundleName, {\n        message: `bundleName: \\`${options?.bundleName}\\` does not match format: \\`/^[\\w\\d_:/@\\.{}\\[\\]$-]+$/\\`.`,\n      }),\n    dryRun: z\n      .boolean({\n        invalid_type_error: \"`dryRun` must be a boolean.\",\n      })\n      .default(false),\n    retryCount: z\n      .number({\n        invalid_type_error: \"`retryCount` must be a number.\",\n      })\n      .positive({\n        message: \"`retryCount` must be a positive number.\",\n      })\n      .int({\n        message: \"`retryCount` must be an integer.\",\n      })\n      .default(3),\n    enableBundleAnalysis: z\n      .boolean({\n        invalid_type_error: \"`enableBundleAnalysis` must be a boolean.\",\n      })\n      .default(false),\n    uploadToken: z\n      .string({ invalid_type_error: \"`uploadToken` must be a string.\" })\n      .optional(),\n    uploadOverrides: UploadOverridesSchema.optional(),\n    debug: z\n      .boolean({\n        invalid_type_error: \"`debug` must be a boolean.\",\n      })\n      .default(false),\n  });\n\ninterface NormalizedOptionsFailure {\n  success: false;\n  errors: string[];\n}\n\ninterface NormalizedOptionsSuccess {\n  success: true;\n  options: NormalizedOptions;\n}\n\n/**\n * This type represents a union of possible results from the the function.\n *\n * @see {@link normalizeOptions}\n */\nexport type NormalizedOptionsResult =\n  | NormalizedOptionsFailure\n  | NormalizedOptionsSuccess;\n\n/**\n * This function is used to normalize the options provided by the user. Validating the options\n * passed by the user, and providing default values for a given set of options if none were\n * provided.\n *\n * @param {Options} userOptions\n * @returns {NormalizedOptionsResult}\n */\nexport const normalizeOptions = (\n  userOptions: Options,\n): NormalizedOptionsResult => {\n  const optionsSchema = optionsSchemaFactory(userOptions);\n  const validatedOptions = optionsSchema.safeParse(userOptions);\n\n  if (!validatedOptions.success) {\n    const errorMessages: string[] = [];\n    const issues = validatedOptions.error.issues;\n\n    for (const issue of issues) {\n      errorMessages.push(issue.message);\n    }\n\n    return {\n      success: false,\n      errors: errorMessages,\n    };\n  }\n\n  return {\n    options: validatedOptions.data,\n    success: true,\n  };\n};\n\n/**\n * This function logs the errors to the console, and will return `shouldExit` if there are errors\n * that we should exit the build process for.\n *\n * @param {NormalizedOptionsFailure} options - The normalized options that failed validation.\n */\nexport const handleErrors = (options: NormalizedOptionsFailure) => {\n  let shouldExit = false;\n  // we probably don't want to exit early so we can provide all the errors to the user\n  for (const error of options.errors) {\n    // if the error is related to the bundleName, we should set a flag\n    if (error.includes(\"bundleName\")) {\n      shouldExit = true;\n    }\n    red(error);\n  }\n\n  return { shouldExit };\n};\n","export class FailedFetchError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","export class NoUploadTokenError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","export class UploadLimitReachedError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","export const SPAWN_PROCESS_BUFFER_SIZE = 1_048_576 * 100; // 100 MiB\n\nexport const DEFAULT_RETRY_COUNT = 3;\nexport const DEFAULT_RETRY_DELAY = 1000;\n\nexport const OWNER_SLUG_JOIN = \":::\";\nexport const REPO_SLUG_JOIN = \"::::\";\n","export class BadResponseError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","export const delay = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","import { BadResponseError } from \"../errors/BadResponseError\";\nimport { DEFAULT_RETRY_DELAY } from \"./constants\";\nimport { delay } from \"./delay\";\nimport { debug, red } from \"./logging\";\n\ninterface FetchWithRetryArgs {\n  url: string;\n  retryCount: number;\n  requestData: RequestInit;\n  name?: string;\n}\n\nexport const fetchWithRetry = async ({\n  url,\n  retryCount,\n  requestData,\n  name,\n}: FetchWithRetryArgs) => {\n  let response = new Response(null, { status: 400 });\n\n  for (let i = 0; i < retryCount + 1; i++) {\n    try {\n      debug(`Attempting to fetch ${name}, attempt: ${i + 1}`);\n      await delay(DEFAULT_RETRY_DELAY * i);\n      response = await fetch(url, requestData);\n\n      if (!response.ok) {\n        throw new BadResponseError(\"Response not ok\");\n      }\n      break;\n    } catch (err) {\n      debug(`${name} fetch attempt ${i + 1} failed`);\n      const isLastAttempt = i + 1 === retryCount;\n\n      if (isLastAttempt) {\n        red(`${name} failed after ${i} attempts`);\n\n        if (!(err instanceof BadResponseError)) {\n          throw err;\n        }\n        return response;\n      }\n    }\n  }\n\n  return response;\n};\n","export class InvalidSlugError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","import { InvalidSlugError } from \"../errors/InvalidSlugError\";\nimport { OWNER_SLUG_JOIN, REPO_SLUG_JOIN } from \"./constants\";\nimport { red } from \"./logging\";\n\nexport const preProcessBody = (\n  body: Record<string, string | null | undefined>,\n) => {\n  for (const [key, value] of Object.entries(body)) {\n    if (key === \"slug\" && typeof value === \"string\") {\n      body[key] = encodeSlug(value);\n    }\n\n    if (!value || value === \"\") {\n      body[key] = null;\n    }\n  }\n\n  return body;\n};\n\nexport const encodeSlug = (slug: string): string => {\n  const repoIndex = slug.lastIndexOf(\"/\") + 1;\n  const owner = slug.substring(0, repoIndex).trimEnd();\n  const repo = slug.substring(repoIndex, slug.length);\n\n  if (owner === \"\" || repo === \"\") {\n    red(\"Invalid owner and/or repo\");\n    throw new InvalidSlugError(\"Invalid owner and/or repo\");\n  }\n\n  const encodedOwner = owner?.split(\"/\").join(OWNER_SLUG_JOIN).slice(0, -3);\n  const encodedSlug = [encodedOwner, repo].join(REPO_SLUG_JOIN);\n\n  return encodedSlug;\n};\n","import { z } from \"zod\";\n\nimport { FailedFetchError } from \"../errors/FailedFetchError.ts\";\nimport { NoUploadTokenError } from \"../errors/NoUploadTokenError.ts\";\nimport { UploadLimitReachedError } from \"../errors/UploadLimitReachedError.ts\";\nimport { type ProviderServiceParams } from \"../types.ts\";\nimport { DEFAULT_RETRY_COUNT } from \"./constants.ts\";\nimport { fetchWithRetry } from \"./fetchWithRetry.ts\";\nimport { green, red } from \"./logging.ts\";\nimport { preProcessBody } from \"./preProcessBody.ts\";\n\ninterface GetPreSignedURLArgs {\n  apiURL: string;\n  uploadToken?: string;\n  serviceParams: Partial<ProviderServiceParams>;\n  retryCount?: number;\n}\n\nconst PreSignedURLSchema = z.object({\n  url: z.string(),\n});\n\nexport const getPreSignedURL = async ({\n  apiURL,\n  uploadToken,\n  serviceParams,\n  retryCount = DEFAULT_RETRY_COUNT,\n}: GetPreSignedURLArgs) => {\n  if (!uploadToken) {\n    red(\"No upload token found\");\n    throw new NoUploadTokenError(\"No upload token found\");\n  }\n\n  const url = `${apiURL}/upload/bundle_analysis/v1`;\n\n  let response: Response;\n  try {\n    response = await fetchWithRetry({\n      url,\n      retryCount,\n      name: \"`get-pre-signed-url`\",\n      requestData: {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `token ${uploadToken}`,\n        },\n        body: JSON.stringify(preProcessBody(serviceParams)),\n      },\n    });\n  } catch (e) {\n    red(\"Failed to fetch pre-signed URL\");\n    throw new FailedFetchError(\"Failed to fetch pre-signed URL\");\n  }\n\n  if (response.status === 429) {\n    red(\"Upload limit reached\");\n    throw new UploadLimitReachedError(\"Upload limit reached\");\n  }\n\n  if (!response.ok) {\n    red(\"Failed to get pre-signed URL, bad response\");\n    throw new FailedFetchError(\"Failed to get pre-signed URL\");\n  }\n\n  let data;\n  try {\n    data = await response.json();\n  } catch (e) {\n    red(\"Failed to parse pre-signed URL body\");\n    throw new FailedFetchError(\"Failed to parse pre-signed URL body\");\n  }\n\n  const parsedData = PreSignedURLSchema.safeParse(data);\n\n  if (!parsedData.success) {\n    red(\"Failed to validate pre-signed URL\");\n    throw new FailedFetchError(\"Failed to validate pre-signed URL\");\n  }\n\n  green(`Successfully pre-signed URL fetched`);\n  return parsedData.data.url;\n};\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return (\n    (envs?.CI === \"true\" || envs?.CI === \"True\") &&\n    (envs?.APPVEYOR === \"true\" || envs?.APPVEYOR === \"True\")\n  );\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.APPVEYOR_JOB_ID ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  const { envs } = inputs;\n  if (\n    envs?.APPVEYOR_URL &&\n    envs?.APPVEYOR_REPO_NAME &&\n    envs?.APPVEYOR_BUILD_ID &&\n    envs?.APPVEYOR_JOB_ID\n  ) {\n    return `${envs?.APPVEYOR_URL}/project/${envs?.APPVEYOR_REPO_NAME}/builds/${envs?.APPVEYOR_BUILD_ID}/job/${envs?.APPVEYOR_JOB_ID}`;\n  }\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.APPVEYOR_REPO_BRANCH ?? null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  if (\n    envs?.APPVEYOR_ACCOUNT_NAME &&\n    envs?.APPVEYOR_PROJECT_SLUG &&\n    envs?.APPVEYOR_BUILD_VERSION\n  ) {\n    return `${envs?.APPVEYOR_ACCOUNT_NAME}/${envs?.APPVEYOR_PROJECT_SLUG}/${envs?.APPVEYOR_BUILD_VERSION}`;\n  }\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n  return envs?.APPVEYOR_PULL_REQUEST_NUMBER ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"appveyor\";\n}\n\nexport function getServiceName(): string {\n  return \"Appveyor CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const commitSha =\n    envs?.APPVEYOR_PULL_REQUEST_HEAD_COMMIT ?? envs?.APPVEYOR_REPO_COMMIT;\n\n  debug(`Using commit: ${commitSha ?? \"\"}`, {\n    enabled: output.debug,\n  });\n\n  return commitSha ?? null;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n  return envs?.APPVEYOR_REPO_NAME ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"APPVEYOR\",\n    \"APPVEYOR_ACCOUNT_NAME\",\n    \"APPVEYOR_BUILD_ID\",\n    \"APPVEYOR_BUILD_VERSION\",\n    \"APPVEYOR_JOB_ID\",\n    \"APPVEYOR_PROJECT_SLUG\",\n    \"APPVEYOR_PULL_REQUEST_HEAD_COMMIT\",\n    \"APPVEYOR_PULL_REQUEST_NUMBER\",\n    \"APPVEYOR_REPO_BRANCH\",\n    \"APPVEYOR_REPO_COMMIT\",\n    \"APPVEYOR_REPO_NAME\",\n    \"APPVEYOR_URL\",\n    \"CI\",\n  ];\n}\n","import childprocess from \"child_process\";\nimport { SPAWN_PROCESS_BUFFER_SIZE } from \"./constants.ts\";\n\nexport function runExternalProgram(\n  programName: string,\n  optionalArguments: string[] = [],\n): string {\n  const result = childprocess.spawnSync(programName, optionalArguments, {\n    maxBuffer: SPAWN_PROCESS_BUFFER_SIZE,\n  });\n\n  if (result.error) {\n    throw new Error(`Error running external program: ${result.error}`);\n  }\n  return result.stdout.toString().trim();\n}\n","import { runExternalProgram } from \"./runExternalProgram.ts\";\n\nexport function parseSlug(slug: unknown): string {\n  // origin    https://github.com/torvalds/linux.git (fetch)\n  // git@github.com: codecov / uploader.git\n  if (typeof slug !== \"string\") {\n    return \"\";\n  }\n\n  if (slug.match(/^(ssh|https?):/)) {\n    // Type is http(s) or ssh\n    const phaseOne = slug.split(\"//\")[1]?.replace(\".git\", \"\") ?? \"\";\n    const phaseTwo = phaseOne?.split(\"/\") ?? \"\";\n    const cleanSlug =\n      phaseTwo.length > 2 ? `${phaseTwo[1]}/${phaseTwo[2]}` : \"\";\n    return cleanSlug;\n  }\n\n  if (slug.match(\"@\")) {\n    // Type is git\n    const cleanSlug = slug.split(\":\")[1]?.replace(\".git\", \"\");\n    return cleanSlug ?? \"\";\n  }\n\n  throw new Error(`Unable to parse slug URL: ${slug}`);\n}\n\nexport function parseSlugFromRemoteAddr(remoteAddr?: string) {\n  let slug = null;\n  if (!remoteAddr) {\n    remoteAddr =\n      runExternalProgram(\"git\", [\"config\", \"--get\", \"remote.origin.url\"]) || \"\";\n  }\n\n  if (remoteAddr) {\n    slug = parseSlug(remoteAddr);\n  }\n\n  if (slug === \"/\") {\n    slug = null;\n  }\n  return slug;\n}\n","import childProcess from \"child_process\";\nimport {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { parseSlugFromRemoteAddr } from \"../git.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.SYSTEM_TEAMFOUNDATIONSERVERURI);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.BUILD_BUILDNUMBER ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  const { envs } = inputs;\n  if (envs?.SYSTEM_TEAMPROJECT && envs?.BUILD_BUILDID) {\n    return `${envs?.SYSTEM_TEAMFOUNDATIONSERVERURI}${envs?.SYSTEM_TEAMPROJECT}/_build/results?buildId=${envs?.BUILD_BUILDID}`;\n  }\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n\n  if (envs?.BUILD_SOURCEBRANCH) {\n    return envs?.BUILD_SOURCEBRANCH.toString().replace(\"refs/heads/\", \"\");\n  }\n\n  return null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.BUILD_BUILDID ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n\n  return (\n    envs?.SYSTEM_PULLREQUEST_PULLREQUESTNUMBER ??\n    envs?.SYSTEM_PULLREQUEST_PULLREQUESTID ??\n    null\n  );\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"azure_pipelines\";\n}\n\nexport function getServiceName(): string {\n  return \"Azure Pipelines\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args?.sha}`, {\n      enabled: output.debug,\n    });\n    return args.sha;\n  }\n\n  let commit = envs?.BUILD_SOURCEVERSION ?? null;\n\n  if (_getPR(inputs)) {\n    const mergeCommitRegex = /^[a-z0-9]{40} [a-z0-9]{40}$/;\n    const mergeCommitMessage = childProcess\n      .execFileSync(\"git\", [\"show\", \"--no-patch\", \"--format=%P\"])\n      .toString()\n      .trimEnd();\n\n    debug(`Merge commit message: ${mergeCommitMessage}`, {\n      enabled: output.debug,\n    });\n\n    if (mergeCommitRegex.exec(mergeCommitMessage)) {\n      const splitMergeCommit = mergeCommitMessage.split(\" \");\n      debug(`Split merge commit: ${splitMergeCommit}`, {\n        enabled: output.debug,\n      });\n\n      commit = splitMergeCommit?.[1] ?? \"\";\n    }\n  }\n\n  debug(`Using commit: ${commit}`, {\n    enabled: output.debug,\n  });\n\n  return commit;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n\n  return envs?.BUILD_REPOSITORY_NAME ?? parseSlugFromRemoteAddr(\"\") ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"BUILD_BUILDID\",\n    \"BUILD_BUILDNUMBER\",\n    \"BUILD_SOURCEBRANCH\",\n    \"BUILD_SOURCEVERSION\",\n    \"SYSTEM_PULLREQUEST_PULLREQUESTID\",\n    \"SYSTEM_PULLREQUEST_PULLREQUESTNUMBER\",\n    \"SYSTEM_TEAMFOUNDATIONSERVERURI\",\n    \"SYSTEM_TEAMPROJECT\",\n  ];\n}\n","import { z } from \"zod\";\n\nconst GIT_SHA_LENGTH = 40;\n\nconst GIT_SHA_REGEX = /^[0-9a-f]+$/;\n\nexport function validateSHA(\n  commitSHA: string,\n  requestedLength: number = GIT_SHA_LENGTH,\n) {\n  const commitSHASchema = z\n    .string()\n    .length(requestedLength)\n    .refine((value) => GIT_SHA_REGEX.test(value));\n\n  const parsedSHA = commitSHASchema.safeParse(commitSHA);\n\n  return parsedSHA.success;\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\nimport { runExternalProgram } from \"../runExternalProgram.ts\";\nimport { validateSHA } from \"../validate.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.CI) && Boolean(envs?.BITBUCKET_BUILD_NUMBER);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.BITBUCKET_BUILD_NUMBER ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  // TODO: https://github.com/codecov/uploader/issues/267\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args?.branch !== \"\") {\n    return args?.branch;\n  }\n  return envs?.BITBUCKET_BRANCH ?? null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.BITBUCKET_BUILD_NUMBER ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n  return envs?.BITBUCKET_PR_ID ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"bitbucket\";\n}\n\nexport function getServiceName(): string {\n  return \"Bitbucket\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  let commit = envs.BITBUCKET_COMMIT ?? \"\";\n  if (commit && validateSHA(commit, 12)) {\n    commit = runExternalProgram(\"git\", [\"rev-parse\", commit]);\n  }\n\n  debug(`Using commit: ${commit ?? \"\"}`, { enabled: output.debug });\n  return commit ?? null;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n  return envs?.BITBUCKET_REPO_FULL_NAME ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"CI\", \"BITBUCKET_BUILD_NUMBER\"];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { parseSlugFromRemoteAddr } from \"../git.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.CI) && Boolean(envs?.BITRISE_IO);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.BITRISE_BUILD_NUMBER ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  const { envs } = inputs;\n  return envs?.BITRISE_BUILD_URL ?? null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.BITRISE_GIT_BRANCH ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n  return envs?.BITRISE_PULL_REQUEST ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"bitrise\";\n}\n\nexport function getServiceName(): string {\n  return \"Bitrise CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  debug(`Using commit: ${envs?.GIT_CLONE_COMMIT_HASH ?? \"\"}`, {\n    enabled: output.debug,\n  });\n\n  return envs?.GIT_CLONE_COMMIT_HASH ?? null;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n  return parseSlugFromRemoteAddr(\"\") ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"BITRISE_BUILD_NUMBER\",\n    \"BITRISE_BUILD_URL\",\n    \"BITRISE_GIT_BRANCH\",\n    \"BITRISE_IO\",\n    \"BITRISE_PULL_REQUEST\",\n    \"CI\",\n    \"GIT_CLONE_COMMIT_HASH\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\nimport { setSlug } from \"../provider.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.BUILDKITE);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.BUILDKITE_BUILD_NUMBER ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  return inputs.envs?.BUILDKITE_BUILD_URL ?? null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.BUILDKITE_BRANCH ?? null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.BUILDKITE_JOB_ID ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nexport function _getService(): ProviderServiceParams[\"service\"] {\n  return \"buildkite\";\n}\n\nexport function getServiceName(): string {\n  return \"Buildkite\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  debug(`Using commit: ${args?.sha ?? envs?.BUILDKITE_COMMIT}`, {\n    enabled: output.debug,\n  });\n  return envs?.BUILDKITE_COMMIT ?? null;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  return setSlug(\n    args?.slug,\n    envs?.BUILDKITE_ORGANIZATION_SLUG,\n    envs?.BUILDKITE_PIPELINE_SLUG,\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"BUILDKITE\",\n    \"BUILDKITE_BRANCH\",\n    \"BUILDKITE_BUILD_NUMBER\",\n    \"BUILDKITE_BUILD_URL\",\n    \"BUILDKITE_COMMIT\",\n    \"BUILDKITE_JOB_ID\",\n    \"BUILDKITE_PROJECT_SLUG\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\nimport { setSlug } from \"../provider.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.CI) && Boolean(envs?.CIRCLECI);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n\n  return envs?.CIRCLE_BUILD_NUM ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  return inputs.envs?.CIRCLE_BUILD_URL ?? null;\n}\n\n// This is the value that gets passed to the Codecov uploader\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"circleci\";\n}\n\n// This is the name that gets printed\nexport function getServiceName(): string {\n  return \"CircleCI\";\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n\n  return envs?.CIRCLE_BRANCH ?? null;\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  debug(`Using commit: ${envs?.CIRCLE_SHA1}`, { enabled: output.debug });\n  return envs?.CIRCLE_SHA1 ?? null;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  const slug = setSlug(\n    args?.slug,\n    envs?.CIRCLE_PROJECT_USERNAME,\n    envs?.CIRCLE_PROJECT_REPONAME,\n  );\n\n  if (envs?.CIRCLE_REPOSITORY_URL && envs?.CIRCLE_REPOSITORY_URL !== \"\") {\n    return `${envs?.CIRCLE_REPOSITORY_URL?.split(\":\")[1]?.split(\".git\")[0]}`;\n  }\n  return slug;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n\n  return envs?.CIRCLE_PR_NUMBER ?? null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.CIRCLE_NODE_INDEX ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"CI\", \"CIRCLECI\"];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\nimport { setSlug } from \"../provider.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.CIRRUS_CI);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.CIRRUS_BUILD_ID ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.CIRRUS_BRANCH ?? null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.CIRRUS_TASK_ID ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n  return envs?.CIRRUS_PR ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"cirrus-ci\";\n}\n\nexport function getServiceName(): string {\n  return \"Cirrus CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n  const sha = envs?.CIRRUS_CHANGE_IN_REPO ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  return setSlug(args?.slug, envs?.CIRRUS_REPO_OWNER, envs?.CIRRUS_REPO_NAME);\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"CIRRUS_CI\"];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.CF_PAGES);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args } = inputs;\n  return args?.build ?? null;\n}\n\nfunction _getBuildURL() {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.CF_PAGES_BRANCH ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"cloudflare-pages\";\n}\n\nexport function getServiceName(): string {\n  return \"Cloudflare Pages\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  debug(`Using commit: ${envs?.CF_PAGES_COMMIT_SHA ?? \"\"}`, {\n    enabled: output.debug,\n  });\n  return envs?.CF_PAGES_COMMIT_SHA ?? null;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args } = inputs;\n  return args?.slug ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"CF_PAGES\", \"CF_PAGES_COMMIT_SHA\", \"CF_PAGES_BRANCH\", \"CF_PAGES_URL\"];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.CODEBUILD_CI);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.CODEBUILD_BUILD_ID ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.CODEBUILD_WEBHOOK_HEAD_REF\n    ? envs?.CODEBUILD_WEBHOOK_HEAD_REF.replace(/^refs\\/heads\\//, \"\")\n    : null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.CODEBUILD_BUILD_ID ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n\n  return envs?.CODEBUILD_SOURCE_VERSION &&\n    envs?.CODEBUILD_SOURCE_VERSION.startsWith(\"pr/\")\n    ? envs?.CODEBUILD_SOURCE_VERSION.replace(/^pr\\//, \"\")\n    : null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"codebuild\";\n}\n\nexport function getServiceName(): string {\n  return \"AWS CodeBuild\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const sha = envs?.CODEBUILD_RESOLVED_SOURCE_VERSION ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args?.slug !== \"\") {\n    return args?.slug;\n  }\n\n  return envs?.CODEBUILD_SOURCE_REPO_URL\n    ? envs?.CODEBUILD_SOURCE_REPO_URL.toString()\n        .replace(/^.*github.com\\//, \"\") // lgtm [js/incomplete-hostname-regexp] - We want this to match all subdomains.\n        .replace(/\\.git$/, \"\")\n    : null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"CODEBUILD_BUILD_ID\",\n    \"CODEBUILD_CI\",\n    \"CODEBUILD_RESOLVED_SOURCE_VERSION\",\n    \"CODEBUILD_SOURCE_REPO_URL\",\n    \"CODEBUILD_SOURCE_VERSION\",\n    \"CODEBUILD_WEBHOOK_HEAD_REF\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.DRONE);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.DRONE_BUILD_NUMBER ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  const { envs } = inputs;\n  return (\n    envs?.DRONE_BUILD_LINK ??\n    envs?.DRONE_BUILD_URL ??\n    envs?.CI_BUILD_URL ??\n    null\n  );\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args?.branch;\n  }\n  return envs?.DRONE_BRANCH ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args?.pr;\n  }\n  return envs?.DRONE_PULL_REQUEST ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"drone.io\";\n}\n\nexport function getServiceName(): string {\n  return \"Drone\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const sha = envs?.DRONE_COMMIT_SHA ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args?.slug !== \"\") {\n    return args?.slug;\n  }\n  return envs?.DRONE_REPO ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"DRONE\",\n    \"DRONE_BRANCH\",\n    \"DRONE_BUILD_NUMBER\",\n    \"DRONE_BUILD_URL\",\n    \"DRONE_COMMIT_SHA\",\n    \"DRONE_PULL_REQUEST\",\n    \"DRONE_REPO\",\n  ];\n}\n","import { z } from \"zod\";\n\nconst literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);\n\ntype Literal = z.infer<typeof literalSchema>;\n\ntype Json = Literal | { [key: string]: Json } | Json[];\n\nexport const jsonSchema: z.ZodType<Json> = z.lazy(() =>\n  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]),\n);\n","import { jsonSchema } from \"../../schemas.ts\";\nimport {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\nimport { runExternalProgram } from \"../runExternalProgram.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.GITHUB_ACTIONS);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.GITHUB_RUN_ID ?? null;\n}\n\nasync function _getJobURL(inputs: ProviderUtilInputs): Promise<string | null> {\n  const url = `https://api.github.com/repos/${_getSlug(\n    inputs,\n  )}/actions/runs/${_getBuild(inputs)}/jobs`;\n  const res = await fetch(url, {\n    headers: {\n      \"User-Agent\": \"Awesome-Octocat-App\",\n    },\n  });\n\n  if (res.status !== 200) {\n    return null;\n  }\n\n  const rawJson = await res.json();\n  const data = jsonSchema.parse(rawJson);\n  const { envs } = inputs;\n\n  if (\n    data &&\n    typeof data === \"object\" &&\n    \"jobs\" in data &&\n    Array.isArray(data?.jobs)\n  ) {\n    for (const job of data?.jobs) {\n      if (\n        job &&\n        typeof job === \"object\" &&\n        \"name\" in job &&\n        job?.name == envs?.GITHUB_JOB &&\n        \"html_url\" in job &&\n        typeof job?.html_url === \"string\"\n      ) {\n        return job?.html_url;\n      }\n    }\n  }\n\n  return null;\n}\n\nasync function _getBuildURL(\n  inputs: ProviderUtilInputs,\n): Promise<ProviderServiceParams[\"buildURL\"]> {\n  const { envs } = inputs;\n\n  const url = await _getJobURL(inputs);\n  if (url !== null) {\n    return url;\n  }\n\n  return `${envs?.GITHUB_SERVER_URL}/${_getSlug(\n    inputs,\n  )}/actions/runs/${_getBuild(inputs)}`;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n\n  const branchRegex = /refs\\/heads\\/(.*)/;\n  const branchMatches = branchRegex.exec(envs?.GITHUB_REF ?? \"\");\n  let branch;\n  if (branchMatches) {\n    branch = branchMatches[1];\n  }\n\n  if (envs?.GITHUB_HEAD_REF && envs?.GITHUB_HEAD_REF !== \"\") {\n    branch = envs?.GITHUB_HEAD_REF;\n  }\n  return branch ?? null;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.GITHUB_WORKFLOW ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n\n  let match;\n  if (envs?.GITHUB_HEAD_REF && envs?.GITHUB_HEAD_REF !== \"\") {\n    const prRegex = /refs\\/pull\\/([0-9]+)\\/merge/;\n    const matches = prRegex.exec(envs?.GITHUB_REF ?? \"\");\n    if (matches) {\n      match = matches[1];\n    }\n  }\n  return match ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"github-actions\";\n}\n\nexport function getServiceName(): string {\n  return \"GitHub Actions\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const pr = _getPR(inputs);\n\n  let commit = envs?.GITHUB_SHA;\n  if (pr) {\n    const mergeCommitRegex = /^[a-z0-9]{40} [a-z0-9]{40}$/;\n    const mergeCommitMessage = runExternalProgram(\"git\", [\n      \"show\",\n      \"--no-patch\",\n      \"--format=%P\",\n    ]);\n\n    debug(`Merge commit message: ${mergeCommitMessage}`, {\n      enabled: output.debug,\n    });\n\n    if (mergeCommitRegex.exec(mergeCommitMessage)) {\n      const splitMergeCommit = mergeCommitMessage.split(\" \");\n\n      debug(`Split commit message: ${splitMergeCommit}`, {\n        enabled: output.debug,\n      });\n\n      commit = splitMergeCommit[1];\n    }\n  }\n\n  debug(`Using commit: ${commit ?? null}`, { enabled: output.debug });\n\n  return commit ?? null;\n}\n\nfunction _getCompareSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"compareSha\"] {\n  const { args } = inputs;\n  if (args?.compareSha && args.compareSha !== \"\") {\n    debug(`Using commit: ${args.compareSha}`, { enabled: output.debug });\n    return args.compareSha;\n  }\n\n  let compareSha = null;\n  const pr = _getPR(inputs);\n  if (pr) {\n    const mergeCommitRegex = /^[a-z0-9]{40} [a-z0-9]{40}$/;\n    const mergeCommitMessage = runExternalProgram(\"git\", [\n      \"show\",\n      \"--no-patch\",\n      \"--format=%P\",\n    ]);\n\n    debug(`Merge commit message: ${mergeCommitMessage}`, {\n      enabled: output.debug,\n    });\n\n    if (mergeCommitRegex.exec(mergeCommitMessage)) {\n      const splitMergeCommit = mergeCommitMessage.split(\" \");\n\n      debug(`Split commit message: ${splitMergeCommit}`, {\n        enabled: output.debug,\n      });\n\n      compareSha = splitMergeCommit?.[0] ? splitMergeCommit[0] : null;\n    }\n  }\n\n  debug(`Using compareSha: ${compareSha ?? null}`, { enabled: output.debug });\n\n  return compareSha ?? null;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n  return envs?.GITHUB_REPOSITORY ?? null;\n}\n\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: await _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    compareSha: _getCompareSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"GITHUB_ACTION\",\n    \"GITHUB_HEAD_REF\",\n    \"GITHUB_REF\",\n    \"GITHUB_REPOSITORY\",\n    \"GITHUB_RUN_ID\",\n    \"GITHUB_SERVER_URL\",\n    \"GITHUB_SHA\",\n    \"GITHUB_WORKFLOW\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { parseSlugFromRemoteAddr } from \"../git.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.GITLAB_CI);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.CI_BUILD_ID ?? envs?.CI_JOB_ID ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.CI_BUILD_REF_NAME ?? envs?.CI_COMMIT_REF_NAME ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"gitlab\";\n}\n\nexport function getServiceName(): string {\n  return \"GitLab CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const sha =\n    envs?.CI_MERGE_REQUEST_SOURCE_BRANCH_SHA ??\n    envs?.CI_BUILD_REF ??\n    envs?.CI_COMMIT_SHA ??\n    null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args?.slug !== \"\") {\n    return args?.slug;\n  }\n  const remoteAddr = envs?.CI_BUILD_REPO ?? envs?.CI_REPOSITORY_URL ?? \"\";\n  return envs?.CI_PROJECT_PATH ?? parseSlugFromRemoteAddr(remoteAddr) ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"CI_BUILD_ID\",\n    \"CI_BUILD_REF\",\n    \"CI_BUILD_REF_NAME\",\n    \"CI_BUILD_REPO\",\n    \"CI_COMMIT_REF_NAME\",\n    \"CI_COMMIT_SHA\",\n    \"CI_JOB_ID\",\n    \"CI_MERGE_REQUEST_SOURCE_BRANCH_SHA\",\n    \"CI_PROJECT_PATH\",\n    \"CI_REPOSITORY_URL\",\n    \"GITLAB_CI\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { parseSlugFromRemoteAddr } from \"../git.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.CI) && Boolean(envs?.HEROKU_TEST_RUN_BRANCH);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.HEROKU_TEST_RUN_ID ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.HEROKU_TEST_RUN_BRANCH ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"heroku\";\n}\n\nexport function getServiceName(): string {\n  return \"Heroku CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args?.sha;\n  }\n\n  const sha = envs?.HEROKU_TEST_RUN_COMMIT_VERSION ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args?.slug;\n  }\n  return parseSlugFromRemoteAddr(\"\");\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"CI\",\n    \"HEROKU_TEST_RUN_BRANCH\",\n    \"HEROKU_TEST_RUN_COMMIT_VERSION\",\n    \"HEROKU_TEST_RUN_ID\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { parseSlugFromRemoteAddr } from \"../git.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.JENKINS_URL);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.BUILD_NUMBER ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  const { envs } = inputs;\n  return envs?.BUILD_URL ? envs?.BUILD_URL : null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return (\n    envs?.ghprbSourceBranch ??\n    envs?.CHANGE_BRANCH ??\n    envs?.GIT_BRANCH ??\n    envs?.BRANCH_NAME ??\n    null\n  );\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n  return envs?.ghprbPullId ?? envs?.CHANGE_ID ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"jenkins\";\n}\n\nexport function getServiceName(): string {\n  return \"Jenkins CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  // Note that the value of GIT_COMMIT may not be accurate if Jenkins\n  // is merging `master` in to the working branch first. In these cases\n  // there is no envvar representing the actual submitted commit\n  const sha = envs?.ghprbActualCommit ?? envs?.GIT_COMMIT ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args } = inputs;\n  if (args?.slug && args?.slug !== \"\") {\n    return args?.slug;\n  }\n  return parseSlugFromRemoteAddr(\"\");\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"BRANCH_NAME\",\n    \"BUILD_NUMBER\",\n    \"BUILD_URL\",\n    \"CHANGE_ID\",\n    \"GIT_BRANCH\",\n    \"GIT_COMMIT\",\n    \"JENKINS_URL\",\n    \"ghprbActualCommit\",\n    \"ghprbPullId\",\n    \"ghprbSourceBranch\",\n  ];\n}\n","import childprocess from \"child_process\";\n\nexport function isProgramInstalled(programName: string): boolean {\n  return !childprocess?.spawnSync(programName)?.error;\n}\n","import {\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { parseSlug } from \"../git.ts\";\nimport { isProgramInstalled } from \"../isProgramInstalled.ts\";\nimport { debug } from \"../logging.ts\";\nimport { runExternalProgram } from \"../runExternalProgram.ts\";\n\n// This provider requires git to be installed\nexport function detect(): boolean {\n  return isProgramInstalled(\"git\");\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args } = inputs;\n  return args?.build ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  const branch = args?.branch ?? envs?.GIT_BRANCH ?? envs?.BRANCH_NAME ?? null;\n  if (branch !== \"\") {\n    return branch;\n  }\n\n  try {\n    const branchName = runExternalProgram(\"git\", [\n      \"rev-parse\",\n      \"--abbrev-ref\",\n      \"HEAD\",\n    ]);\n    return branchName;\n  } catch (error) {\n    throw new Error(\n      `There was an error getting the branch name from git: ${error}`,\n    );\n  }\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\n// This is the value that gets passed to the Codecov uploader\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"\";\n}\n\n// This is the name that gets printed\nexport function getServiceName(): string {\n  return \"Local\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  const sha = args?.sha ?? envs?.GIT_COMMIT ?? null;\n  if (sha !== \"\") {\n    debug(`Using commit: ${sha}`, { enabled: output.debug });\n    return sha;\n  }\n\n  try {\n    const sha = runExternalProgram(\"git\", [\"rev-parse\", \"HEAD\"]);\n    debug(`Using commit: ${sha}`, { enabled: output.debug });\n    return sha;\n  } catch (error) {\n    throw new Error(\n      `There was an error getting the commit SHA from git: ${error}`,\n    );\n  }\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args } = inputs;\n  if (args?.slug && args?.slug !== \"\") {\n    return args.slug;\n  }\n\n  try {\n    const slug = runExternalProgram(\"git\", [\n      \"config\",\n      \"--get\",\n      \"remote.origin.url\",\n    ]);\n\n    return parseSlug(slug);\n  } catch (error) {\n    throw new Error(`There was an error getting the slug from git: ${error}`);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"BRANCH_NAME\", \"CI\", \"GIT_BRANCH\", \"GIT_COMMIT\"];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.NETLIFY);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.BUILD_ID ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args?.branch;\n  }\n  return envs?.BRANCH ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"netlify\";\n}\n\nexport function getServiceName(): string {\n  return \"Netlify\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const sha = envs?.COMMIT_REF ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args } = inputs;\n  return args?.slug ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"NETLIFY\",\n    \"BUILD_ID\",\n    \"REPOSITORY_URL\",\n    \"BRANCH\",\n    \"HEAD\",\n    \"COMMIT_REF\",\n    \"CACHED_COMMIT_REF\",\n    \"PULL_REQUEST\",\n    \"REVIEW_ID\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.RENDER);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args } = inputs;\n  return args?.build ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.RENDER_GIT_BRANCH ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"render\";\n}\n\nexport function getServiceName(): string {\n  return \"Render\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const sha = envs?.RENDER_GIT_COMMIT ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args?.slug !== \"\") {\n    return args?.slug;\n  }\n  return envs?.RENDER_GIT_REPO_SLUG ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"RENDER\",\n    \"IS_PULL_REQUEST\",\n    \"RENDER_DISCOVERY_SERVICE\",\n    \"RENDER_EXTERNAL_HOSTNAME\",\n    \"RENDER_EXTERNAL_URL\",\n    \"RENDER_GIT_BRANCH\",\n    \"RENDER_GIT_COMMIT\",\n    \"RENDER_GIT_REPO_SLUG\",\n    \"RENDER_INSTANCE_ID\",\n    \"RENDER_SERVICE_ID\",\n    \"RENDER_SERVICE_NAME\",\n    \"RENDER_SERVICE_TYPE\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { parseSlugFromRemoteAddr } from \"../git.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.TEAMCITY_VERSION);\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\n// This is the value that gets passed to the Codecov uploader\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"teamcity\";\n}\n\n// This is the name that gets printed\nexport function getServiceName(): string {\n  return \"TeamCity\";\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.BRANCH_NAME ?? null;\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n\n  const sha = envs?.BUILD_VCS_NUMBER ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n  return parseSlugFromRemoteAddr(\"\") ?? null;\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.BUILD_NUMBER ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"TEAMCITY_VERSION\"];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return (\n    Boolean(envs?.CI) &&\n    Boolean(envs?.TRAVIS) &&\n    Boolean(envs?.SHIPPABLE) === false\n  );\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.TRAVIS_JOB_NUMBER ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n\n  let branch = null;\n  if (envs?.TRAVIS_BRANCH !== envs?.TRAVIS_TAG) {\n    branch = envs?.TRAVIS_PULL_REQUEST_BRANCH ?? envs?.TRAVIS_BRANCH ?? null;\n  }\n  return branch;\n}\n\nfunction _getJob(envs: ProviderEnvs): ProviderServiceParams[\"job\"] {\n  return envs?.TRAVIS_JOB_ID ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n  return envs?.TRAVIS_PULL_REQUEST ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"travis\";\n}\n\nexport function getServiceName(): string {\n  return \"Travis CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n  const sha = envs?.TRAVIS_PULL_REQUEST_SHA ?? envs?.TRAVIS_COMMIT ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n  return envs?.TRAVIS_REPO_SLUG ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(inputs.envs),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"TRAVIS\"];\n}\n","// VERCEL ENV DOCS\n// https://vercel.com/docs/projects/environment-variables/system-environment-variables\n\nimport {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.VERCEL);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args } = inputs;\n  return args?.build ?? null;\n}\n\nfunction _getBuildURL(): ProviderServiceParams[\"buildURL\"] {\n  return null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.VERCEL_GIT_COMMIT_REF ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"vercel\";\n}\n\nexport function getServiceName(): string {\n  return \"Vercel\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n  const sha = envs?.VERCEL_GIT_COMMIT_SHA ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n\n  let slug = null;\n  const owner = envs?.VERCEL_GIT_REPO_OWNER ?? \"\";\n  const repo = envs?.VERCEL_GIT_REPO_SLUG ?? \"\";\n  if (owner && repo) {\n    slug = `${owner}/${repo}`;\n  }\n\n  return slug;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"VERCEL\",\n    \"CI\",\n    \"VERCEL_ENV\",\n    \"VERCEL_URL\",\n    \"VERCEL_BRANCH_URL\",\n    \"VERCEL_REGION\",\n    \"VERCEL_AUTOMATION_BYPASS_SECRET\",\n    \"VERCEL_GIT_PROVIDER\",\n    \"VERCEL_GIT_REPO_SLUG\",\n    \"VERCEL_GIT_REPO_OWNER\",\n    \"VERCEL_GIT_REPO_ID\",\n    \"VERCEL_GIT_COMMIT_REF\",\n    \"VERCEL_GIT_COMMIT_SHA\",\n    \"VERCEL_GIT_COMMIT_MESSAGE\",\n    \"VERCEL_GIT_COMMIT_AUTHOR_NAME\",\n    \"VERCEL_GIT_PREVIOUS_SHA\",\n    \"VERCEL_GIT_PULL_REQUEST_ID\",\n  ];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\nimport { setSlug } from \"../provider.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return Boolean(envs?.WERCKER_MAIN_PIPELINE_STARTED);\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.WERCKER_MAIN_PIPELINE_STARTED ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  const { envs } = inputs;\n  return envs?.WERCKER_BUILD_URL ?? null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n  return envs?.WERCKER_GIT_BRANCH ?? null;\n}\n\nfunction _getJob(): ProviderServiceParams[\"job\"] {\n  return null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args } = inputs;\n  return args?.pr ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"wercker\";\n}\n\nexport function getServiceName(): string {\n  return \"Wercker CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n  const sha = envs?.WERCKER_GIT_COMMIT ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  return setSlug(\n    args?.slug,\n    envs?.WERCKER_GIT_OWNER,\n    envs?.WERCKER_GIT_REPOSITORY,\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    job: _getJob(),\n    pr: _getPR(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\"WERCKER_MAIN_PIPELINE_STARTED\"];\n}\n","import {\n  type ProviderEnvs,\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../../types.ts\";\nimport { type Output } from \"../Output.ts\";\nimport { debug } from \"../logging.ts\";\n\nexport function detect(envs: ProviderEnvs): boolean {\n  return envs?.CI === \"woodpecker\";\n}\n\nfunction _getBuild(inputs: ProviderUtilInputs): ProviderServiceParams[\"build\"] {\n  const { args, envs } = inputs;\n  if (args?.build && args.build !== \"\") {\n    return args.build;\n  }\n  return envs?.CI_BUILD_NUMBER ?? null;\n}\n\nfunction _getBuildURL(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"buildURL\"] {\n  const { envs } = inputs;\n  return envs?.CI_BUILD_LINK ?? null;\n}\n\nfunction _getBranch(\n  inputs: ProviderUtilInputs,\n): ProviderServiceParams[\"branch\"] {\n  const { args, envs } = inputs;\n  if (args?.branch && args.branch !== \"\") {\n    return args.branch;\n  }\n\n  return envs?.CI_COMMIT_SOURCE_BRANCH ?? envs?.CI_COMMIT_BRANCH ?? null;\n}\n\nfunction _getJob(inputs: ProviderUtilInputs): ProviderServiceParams[\"job\"] {\n  const { envs } = inputs;\n  return envs?.CI_JOB_NUMBER ?? null;\n}\n\nfunction _getPR(inputs: ProviderUtilInputs): ProviderServiceParams[\"pr\"] {\n  const { args, envs } = inputs;\n  if (args?.pr && args.pr !== \"\") {\n    return args.pr;\n  }\n  return envs?.CI_COMMIT_PULL_REQUEST ?? null;\n}\n\nfunction _getService(): ProviderServiceParams[\"service\"] {\n  return \"woodpecker\";\n}\n\nexport function getServiceName(): string {\n  return \"Woodpecker CI\";\n}\n\nfunction _getSHA(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): ProviderServiceParams[\"commit\"] {\n  const { args, envs } = inputs;\n  if (args?.sha && args.sha !== \"\") {\n    debug(`Using commit: ${args.sha}`, { enabled: output.debug });\n    return args.sha;\n  }\n  const sha = envs?.CI_COMMIT_SHA ?? null;\n  debug(`Using commit: ${sha}`, { enabled: output.debug });\n  return sha;\n}\n\nfunction _getSlug(inputs: ProviderUtilInputs): ProviderServiceParams[\"slug\"] {\n  const { args, envs } = inputs;\n  if (args?.slug && args.slug !== \"\") {\n    return args.slug;\n  }\n  return envs?.CI_REPO ?? null;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getServiceParams(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  return {\n    branch: _getBranch(inputs),\n    build: _getBuild(inputs),\n    buildURL: _getBuildURL(inputs),\n    commit: _getSHA(inputs, output),\n    pr: _getPR(inputs),\n    job: _getJob(inputs),\n    service: _getService(),\n    slug: _getSlug(inputs),\n  };\n}\n\nexport function getEnvVarNames() {\n  return [\n    \"CI\",\n    \"CI_BUILD_NUMBER\",\n    \"CI_BUILD_LINK\",\n    \"CI_COMMIT_SOURCE_BRANCH\",\n    \"CI_COMMIT_BRANCH\",\n    \"CI_JOB_NUMBER\",\n    \"CI_COMMIT_PULL_REQUEST\",\n    \"CI_COMMIT_SHA\",\n    \"CI_COMMIT_TAG\",\n    \"CI_REPO\",\n  ];\n}\n","import { type ProviderUtil } from \"../../types.ts\";\n\nimport * as AppVeyorCI from \"./AppVeyorCI.ts\";\nimport * as AzurePipelines from \"./AzurePipelines.ts\";\nimport * as Bitbucket from \"./Bitbucket.ts\";\nimport * as Bitrise from \"./Bitrise.ts\";\nimport * as Buildkite from \"./Buildkite.ts\";\nimport * as CircleCI from \"./CircleCI.ts\";\nimport * as Cirrus from \"./Cirrus.ts\";\nimport * as CloudflarePages from \"./CloudflarePages.ts\";\nimport * as CodeBuild from \"./CodeBuild.ts\";\nimport * as Drone from \"./Drone.ts\";\nimport * as GitHubActions from \"./GitHubActions.ts\";\nimport * as GitLabCI from \"./GitLabCI.ts\";\nimport * as HerokuCI from \"./HerokuCI.ts\";\nimport * as JenkinsCI from \"./JenkinsCI.ts\";\nimport * as Local from \"./Local.ts\";\nimport * as Netlify from \"./Netlify.ts\";\nimport * as Render from \"./Render.ts\";\nimport * as TeamCity from \"./TeamCity.ts\";\nimport * as TravisCI from \"./TravisCI.ts\";\nimport * as Vercel from \"./Vercel.ts\";\nimport * as Wercker from \"./Wercker.ts\";\nimport * as Woodpecker from \"./Woodpecker.ts\";\n\n// Please make sure provider_local is last\nexport const providerList: ProviderUtil[] = [\n  AppVeyorCI,\n  AzurePipelines,\n  Bitbucket,\n  Bitrise,\n  Buildkite,\n  CircleCI,\n  Cirrus,\n  CloudflarePages,\n  CodeBuild,\n  Drone,\n  GitHubActions,\n  GitLabCI,\n  HerokuCI,\n  JenkinsCI,\n  Netlify,\n  Render,\n  TeamCity,\n  TravisCI,\n  Vercel,\n  Wercker,\n  Woodpecker,\n  Local,\n];\n","import {\n  type ProviderServiceParams,\n  type ProviderUtilInputs,\n} from \"../types.ts\";\nimport { type Output } from \"./Output.ts\";\nimport { cyan, red } from \"./logging.ts\";\nimport { providerList } from \"./providers\";\n\nexport async function detectProvider(\n  inputs: ProviderUtilInputs,\n  output: Output,\n): Promise<ProviderServiceParams> {\n  cyan(\"Detecting CI provider\");\n  for (const provider of providerList) {\n    if (provider.detect(inputs.envs)) {\n      cyan(`Detected CI provider: ${provider.getServiceName()}`);\n      return await provider.getServiceParams(inputs, output);\n    }\n  }\n  red(\"Could not detect CI provider\");\n  throw new Error(\"Could not detect provider\");\n}\n\nexport function setSlug(\n  slugArg: string | undefined,\n  orgEnv: string | undefined,\n  repoEnv: string | undefined,\n) {\n  if (typeof slugArg !== \"undefined\" && slugArg !== \"\") {\n    return slugArg;\n  }\n\n  if (\n    typeof orgEnv !== \"undefined\" &&\n    typeof repoEnv !== \"undefined\" &&\n    orgEnv !== \"\" &&\n    repoEnv !== \"\"\n  ) {\n    return `${orgEnv}/${repoEnv}`;\n  }\n\n  return null;\n}\n","export class FailedUploadError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","import { ReadableStream, TextEncoderStream } from \"node:stream/web\";\n\nimport { FailedUploadError } from \"../errors/FailedUploadError\";\nimport { green, red } from \"./logging\";\nimport { fetchWithRetry } from \"./fetchWithRetry\";\nimport { DEFAULT_RETRY_COUNT } from \"./constants\";\nimport { UploadLimitReachedError } from \"../errors/UploadLimitReachedError\";\nimport { FailedFetchError } from \"../errors/FailedFetchError\";\n\ninterface UploadStatsArgs {\n  message: string;\n  bundleName: string;\n  preSignedUrl: string;\n  retryCount?: number;\n}\n\nexport async function uploadStats({\n  message,\n  bundleName,\n  preSignedUrl,\n  retryCount = DEFAULT_RETRY_COUNT,\n}: UploadStatsArgs) {\n  const iterator = message[Symbol.iterator]();\n  const stream = new ReadableStream({\n    pull(controller) {\n      const iteration = iterator.next();\n\n      if (iteration.done) {\n        controller.close();\n      } else {\n        controller.enqueue(iteration.value);\n      }\n    },\n  }).pipeThrough(new TextEncoderStream());\n\n  let response: Response;\n  try {\n    response = await fetchWithRetry({\n      url: preSignedUrl,\n      retryCount,\n      name: \"`upload-stats`\",\n      requestData: {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        duplex: \"half\",\n        // @ts-expect-error TypeScript doesn't know that fetch can accept a\n        // ReadableStream as the body\n        body: stream,\n      },\n    });\n  } catch (e) {\n    red(\"Failed to upload stats, fetch failed\");\n    throw new FailedFetchError(\"Failed to upload stats\");\n  }\n\n  if (response.status === 429) {\n    red(\"Upload limit reached\");\n    throw new UploadLimitReachedError(\"Upload limit reached\");\n  }\n\n  if (!response.ok) {\n    red(\n      `Failed to upload stats, bad response. Response ${response.status} - ${response.statusText}`,\n    );\n    throw new FailedUploadError(\"Failed to upload stats\");\n  }\n\n  green(`Successfully uploaded stats for bundle: ${bundleName}`);\n  return true;\n}\n","import {\n  type Asset,\n  type Chunk,\n  type Module,\n  type OutputPayload,\n  type ProviderUtilInputs,\n  type UploadOverrides,\n} from \"../types.ts\";\nimport { getPreSignedURL } from \"./getPreSignedURL.ts\";\nimport { type NormalizedOptions } from \"./normalizeOptions.ts\";\nimport { detectProvider } from \"./provider.ts\";\nimport { uploadStats } from \"./uploadStats.ts\";\n\nclass Output {\n  // base user options\n  apiUrl: string;\n  dryRun: boolean;\n  retryCount: number;\n  enableBundleAnalysis: boolean;\n  uploadToken?: string;\n  debug: boolean;\n  originalBundleName: string;\n  // uploader overrides\n  branch?: string;\n  build?: string;\n  pr?: string;\n  sha?: string;\n  slug?: string;\n  // bundle analysis properties\n  version: string;\n  bundler?: {\n    name: string;\n    version: string;\n  };\n  outputPath?: string;\n  builtAt?: number;\n  duration?: number;\n  assets?: Asset[];\n  chunks?: Chunk[];\n  modules?: Module[];\n  // internal options/properties\n  #internalBundleName: string;\n  #internalPlugin?: {\n    name: string;\n    version: string;\n  };\n  #internalLocks = {\n    bundleName: false,\n    pluginDetails: false,\n  };\n\n  constructor(userOptions: NormalizedOptions) {\n    this.version = \"2\";\n    this.apiUrl = userOptions.apiUrl;\n    this.dryRun = userOptions.dryRun;\n    this.retryCount = userOptions.retryCount;\n    this.enableBundleAnalysis = userOptions.enableBundleAnalysis;\n    this.uploadToken = userOptions.uploadToken;\n    this.debug = userOptions.debug;\n    this.originalBundleName = userOptions.bundleName;\n\n    if (userOptions.uploadOverrides) {\n      this.branch = userOptions.uploadOverrides.branch;\n      this.build = userOptions.uploadOverrides.build;\n      this.pr = userOptions.uploadOverrides.pr;\n      this.sha = userOptions.uploadOverrides.sha;\n      this.slug = userOptions.uploadOverrides.slug;\n    }\n\n    this.#internalBundleName = userOptions.bundleName;\n  }\n\n  start() {\n    this.builtAt = Date.now();\n  }\n\n  end() {\n    this.duration = Date.now() - (this.builtAt ?? 0);\n  }\n\n  lockBundleName() {\n    this.#internalLocks.bundleName = true;\n  }\n\n  unlockBundleName() {\n    this.#internalLocks.bundleName = false;\n  }\n\n  setBundleName(bundleName: string) {\n    if (!this.#internalLocks.bundleName) {\n      this.#internalBundleName = bundleName;\n    }\n\n    return this.#internalBundleName;\n  }\n\n  get bundleName() {\n    return this.#internalBundleName;\n  }\n\n  setPlugin(pluginName: string, pluginVersion: string) {\n    if (!this.#internalLocks.pluginDetails) {\n      this.#internalPlugin = {\n        name: pluginName,\n        version: pluginVersion,\n      };\n    }\n\n    return this.#internalPlugin;\n  }\n\n  get plugin() {\n    return this.#internalPlugin;\n  }\n\n  lockPluginDetails() {\n    this.#internalLocks.pluginDetails = true;\n  }\n\n  unlockPluginDetails() {\n    this.#internalLocks.pluginDetails = false;\n  }\n\n  async write() {\n    if (this.dryRun) return;\n\n    if (!this.bundleName || this.bundleName === \"\") return;\n\n    const args: UploadOverrides = {\n      branch: this.branch,\n      build: this.build,\n      pr: this.pr,\n      sha: this.sha,\n      slug: this.slug,\n    };\n    const envs = process.env;\n    const inputs: ProviderUtilInputs = { envs, args };\n    const provider = await detectProvider(inputs, this);\n\n    let url = \"\";\n    try {\n      url = await getPreSignedURL({\n        apiURL: this?.apiUrl ?? \"https://api.codecov.io\",\n        uploadToken: this?.uploadToken,\n        serviceParams: provider,\n        retryCount: this?.retryCount,\n      });\n    } catch (error) {\n      return;\n    }\n\n    try {\n      await uploadStats({\n        preSignedUrl: url,\n        bundleName: this.bundleName,\n        message: this.bundleStatsToJson(),\n        retryCount: this?.retryCount,\n      });\n    } catch (error) {\n      return;\n    }\n\n    return;\n  }\n\n  bundleStatsToJson() {\n    const payload: OutputPayload = {\n      version: this.version,\n      builtAt: this.builtAt,\n      duration: this.duration,\n      bundleName: this.bundleName ?? \"\",\n      outputPath: this.outputPath,\n      bundler: this.bundler,\n      plugin: this.plugin,\n      assets: this.assets,\n      chunks: this.chunks,\n      modules: this.modules,\n    };\n\n    return JSON.stringify(payload);\n  }\n}\n\nexport { Output };\n"],"names":["msg","l","Chalk","enabled","NODE_VERSION_RANGE","unpluginMetaContext","satisfies","red","COMPRESSIBLE_ASSETS_RE","fileName","code","promisify","gzip","HASH_REGEX","POTENTIAL_HASHES","escapeRegex","string","path","format","matches","hash","index","normalizedPath","match","leadingDelimiter","leadingRegex","endingDelimiter","endingRegex","regexString","HASH_REPLACE_REGEX","source","formatString","size","gzipSize","getCompressedSize","normalizePath","validBundleName","UploadOverridesSchema","z","optionsSchemaFactory","options","userOptions","validatedOptions","errorMessages","issues","issue","shouldExit","error","ms","resolve","url","retryCount","requestData","name","response","i","debug","delay","DEFAULT_RETRY_DELAY","BadResponseError","err","body","key","value","slug","repoIndex","owner","repo","InvalidSlugError","OWNER_SLUG_JOIN","REPO_SLUG_JOIN","PreSignedURLSchema","apiURL","uploadToken","serviceParams","DEFAULT_RETRY_COUNT","NoUploadTokenError","fetchWithRetry","preProcessBody","FailedFetchError","UploadLimitReachedError","data","parsedData","green","detect","envs","_getBuild","inputs","args","_getBuildURL","_getBranch","_getJob","_getPR","_getService","getServiceName","_getSHA","output","commitSha","_getSlug","getServiceParams","getEnvVarNames","programName","optionalArguments","result","childprocess","SPAWN_PROCESS_BUFFER_SIZE","phaseTwo","remoteAddr","runExternalProgram","commit","mergeCommitRegex","mergeCommitMessage","childProcess","splitMergeCommit","parseSlugFromRemoteAddr","GIT_SHA_LENGTH","GIT_SHA_REGEX","commitSHA","requestedLength","validateSHA","setSlug","sha","literalSchema","_getJobURL","res","rawJson","jsonSchema","job","branchMatches","branch","pr","_getCompareSHA","compareSha","isProgramInstalled","parseSlug","AppVeyorCI","AzurePipelines","Bitbucket","Bitrise","Buildkite","CircleCI","Cirrus","CloudflarePages","CodeBuild","Drone","GitHubActions","GitLabCI","HerokuCI","JenkinsCI","Netlify","Render","TeamCity","TravisCI","Vercel","Wercker","Woodpecker","Local","cyan","provider","providerList","slugArg","orgEnv","repoEnv","message","bundleName","preSignedUrl","iterator","stream","ReadableStream","controller","iteration","TextEncoderStream","FailedUploadError","_internalBundleName","_internalPlugin","_internalLocks","Output","__publicField","__privateAdd","__privateSet","__privateGet","pluginName","pluginVersion","detectProvider","getPreSignedURL","uploadStats","payload"],"mappings":"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"}